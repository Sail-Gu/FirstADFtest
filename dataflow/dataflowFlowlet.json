{
	"name": "dataflowFlowlet",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "Linkedservice_dbastoreaccounttest",
						"type": "LinkedServiceReference"
					},
					"name": "sourceEmployduplicate"
				},
				{
					"linkedService": {
						"referenceName": "Linkedservice_dbastoreaccounttest",
						"type": "LinkedServiceReference"
					},
					"name": "sourceDeptduplicate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CSVoutputJoinemployeedept",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "CSVoutputJoinemployeedept",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "flowlet1",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "flowlet2",
					"flowlet": {
						"referenceName": "flowlet1",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          name as string,",
				"          gender as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'data',",
				"     folderPath: 'Input',",
				"     fileName: 'Employee_Duplicate20221226.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> sourceEmployduplicate",
				"source(output(",
				"          id as string,",
				"          name as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'data',",
				"     folderPath: 'Input',",
				"     fileName: 'Dept_Duplicate20221226.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> sourceDeptduplicate",
				"sourceEmployduplicate compose(mapColumn(",
				"          id,",
				"          name,",
				"          gender",
				"     ),",
				"     composition: 'flowlet1') ~> flowlet1@(output1)",
				"derivedColumn1 compose(mapColumn(",
				"          id,",
				"          name,",
				"          gender = gendor",
				"     ),",
				"     composition: 'flowlet1') ~> flowlet2@(output1)",
				"sourceDeptduplicate derive(gendor = 'OK') ~> derivedColumn1",
				"flowlet1@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['kkkkkk.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"flowlet2@output1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['dpet.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          id,",
				"          name",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}