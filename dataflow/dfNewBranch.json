{
	"name": "dfNewBranch",
	"properties": {
		"folder": {
			"name": "StudyDemo"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DSemployeeCSV",
						"type": "DatasetReference"
					},
					"name": "sourceEmployeeCSV"
				},
				{
					"dataset": {
						"referenceName": "DSdeptmentCSV",
						"type": "DatasetReference"
					},
					"name": "sourceDept"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CSVoutputJoinemployeedept",
						"type": "DatasetReference"
					},
					"name": "sinkAggregateCSV"
				},
				{
					"dataset": {
						"referenceName": "CSVoutputJoinemployeedept",
						"type": "DatasetReference"
					},
					"name": "sinktestCSV"
				}
			],
			"transformations": [
				{
					"name": "aggregateDept"
				},
				{
					"name": "joinDeptEmployee"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          deptment as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceEmployeeCSV",
				"source(output(",
				"          depid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDept",
				"sourceEmployeeCSV aggregate(groupBy(deptment),",
				"     TotalEmployee = count(empid)) ~> aggregateDept",
				"sourceEmployeeCSV, sourceDept join(deptment == depid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDeptEmployee",
				"joinDeptEmployee sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['sinkAggregateCSV.cvs'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          empid,",
				"          name,",
				"          country,",
				"          deptment,",
				"          depname",
				"     ),",
				"     partitionBy('hash', 1)) ~> sinkAggregateCSV",
				"aggregateDept sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['kkkkkk.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          deptment,",
				"          TotalEmployees = TotalEmployee",
				"     ),",
				"     partitionBy('hash', 1)) ~> sinktestCSV"
			]
		}
	}
}