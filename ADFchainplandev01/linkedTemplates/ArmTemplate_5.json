{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFchainplandev01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dfFuzzy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSale1"
						},
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSale2"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "joinFuzzy"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Name as string,",
						"          Item as string,",
						"          Quantity as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'Input',",
						"     fileName: 'Sail1_Fuzzy.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSale1",
						"source(output(",
						"          Name as string,",
						"          Item as string,",
						"          Quantity as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'Input',",
						"     fileName: 'Sail2_Fuzzy.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSale2",
						"sourceSale1, sourceSale2 join(fuzzyCompare(sourceSale1@Name, sourceSale2@Name, 60.00),",
						"     joinType:'inner',",
						"     matchType:'fuzzy',",
						"     ignoreSpaces: false,",
						"     scoreColumn:'Samilarity%',",
						"     broadcast: 'off')~> joinFuzzy",
						"joinFuzzy sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfLesson8IncrementKeys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployee20221231"
						},
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceAllEmployee"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sinkAllemployee"
						}
					],
					"transformations": [
						{
							"name": "aggregateMaxEmployeeId"
						},
						{
							"name": "surrogateKeyId"
						},
						{
							"name": "joinNewEmployee"
						},
						{
							"name": "derivedColumnEmpid"
						},
						{
							"name": "selectNeedcolumns"
						},
						{
							"name": "unionAllwithNew"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          gender as string,",
						"          department as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     fileName: 'Lesson8_Employee20221231.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployee20221231",
						"source(output(",
						"          id as short,",
						"          name as string,",
						"          gender as string,",
						"          department as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     fileName: 'Lesson8_AllEmployee.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceAllEmployee",
						"sourceAllEmployee aggregate(MaxId = max(id)) ~> aggregateMaxEmployeeId",
						"sourceEmployee20221231 keyGenerate(output(NewId as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyId",
						"surrogateKeyId, aggregateMaxEmployeeId join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinNewEmployee",
						"joinNewEmployee derive(id = toInteger(NewId+MaxId)) ~> derivedColumnEmpid",
						"derivedColumnEmpid select(mapColumn(",
						"          name,",
						"          gender,",
						"          department,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectNeedcolumns",
						"sourceAllEmployee, selectNeedcolumns union(byName: true)~> unionAllwithNew",
						"unionAllwithNew sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Lesson8_AllEmployee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkAllemployee"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfUDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnGender"
						},
						{
							"name": "derivedColumnUDFGendertoInteger"
						},
						{
							"name": "union1"
						}
					],
					"udfLibraries": [
						{
							"referenceName": "StringLIbrary",
							"type": "DataFlowReference"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          gender as string,",
						"          salary as short,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'Input',",
						"     fileName: 'EmployeeCacheSink.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 derive(NewGender = iif(gender==\"male\", 1, iif(gender==\"female\",0,-1))) ~> derivedColumnGender",
						"source1 derive(NewGender = udfGenderToInteger(gender)) ~> derivedColumnUDFGendertoInteger",
						"derivedColumnUDFGendertoInteger, derivedColumnGender union(byName: true)~> union1",
						"union1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete files older than 30 days')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Please input a folder path as the parameter for this pipeline, and the pipeline will delete files which were last modified more than 30 days ago under the particular folder path.",
				"activities": [
					{
						"name": "DeleteFiles",
						"description": "Connect to your storage account to save the log file.",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDatasetForDeleteActivity",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceDirectory",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "Linkedservice_dbastoreaccounttest",
									"type": "LinkedServiceReference"
								},
								"path": {
									"value": "@pipeline().parameters.LoggingPath",
									"type": "Expression"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeEnd": {
									"value": "@{adddays(pipeline().TriggerTime, -10)}",
									"type": "Expression"
								},
								"wildcardFileName": "*"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SourceFolder": {
						"type": "string",
						"defaultValue": "data"
					},
					"SourceDirectory": {
						"type": "string",
						"defaultValue": "output"
					},
					"LoggingPath": {
						"type": "string",
						"defaultValue": "data/output1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-24T08:54:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Lesson5_ForeachCopyDeletefiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata Input Folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DSinputDem",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata Input Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata Input Folder').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data Archive",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": "Input",
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DelimitedText3",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText4",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data Archive",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DelimitedText3",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@{item().name}",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "AllAboutBI"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-20T12:30:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipeLesson2GetSouceFilenames')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MetadataFilenames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CSVTaret",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get MetadataFilenames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get MetadataFilenames').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy dataFile",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "CSVtarget1",
											"type": "DatasetReference",
											"parameters": {
												"InputFilename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Lesson2output",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-29T03:36:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipeLesson2GetSouceFilenames_copy_issued')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MetadataFilenames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CSVTaret",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get MetadataFilenames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get MetadataFilenames').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy dataFile",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable Filename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "CSVtarget1",
											"type": "DatasetReference",
											"parameters": {
												"InputFilename": {
													"value": "@variables('VarFilename')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Lesson2output",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set variable Filename",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "VarFilename",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"VarFilename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-29T03:41:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeGetMeta_Ifcondition')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MetadataStoragefile",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "If Condition CopyFolder1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "InputDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists",
								"itemName",
								"itemType",
								"lastModified",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get MetadataStoragefile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(formatDateTime(utcnow(),'yyyy-MM-dd'),\nformatDateTime(activity('Get MetadataStoragefile').output.lastModified,'yyyy-MM-dd')))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FaleWait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "If Condition CopyFolder1",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(pipeline().parameters.IfCopyFolder1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WaitFolder2wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@pipeline().parameters.Folder2Wait",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WaitFolder1wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@pipeline().parameters.Folder1Wait",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"IfCopyFolder1": {
						"type": "bool",
						"defaultValue": false
					},
					"Folder1Wait": {
						"type": "int",
						"defaultValue": 1
					},
					"Folder2Wait": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-12T01:39:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeUntilactivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('FileExists')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "InputDataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata1').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Filename",
													"value": "kk.txt"
												}
											}
										]
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "If Condition1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "InputDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Outputdataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileExists",
										"value": true
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"FileExists": {
						"type": "Boolean",
						"defaultValue": false
					},
					"Filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-13T02:43:07Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline Lesson16 Validate file Schema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata Employee",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DSADFRealLesson16ParameterEmployee",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "EmployeeLesson16.csv"
								}
							},
							"fieldList": [
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Get Metadata EmployeeRef",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DSADFRealLesson16ParameterEmployee",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "EmployeeLesson16Ref.csv"
								}
							},
							"fieldList": [
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If ConditionSchemamaches",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata Employee",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Metadata EmployeeRef",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Metadata Employee').output.structure,activity('Get Metadata EmployeeRef').output.structure )",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WaitFalse",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 2
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WaitTrue",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 5
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T14:21:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['product_number']"
										},
										"sink": {
											"ordinal": 1
										}
									},
									{
										"source": {
											"path": "$['product_description']"
										},
										"sink": {
											"ordinal": 2
										}
									},
									{
										"source": {
											"path": "$['product_description_2']"
										},
										"sink": {
											"ordinal": 3
										}
									},
									{
										"source": {
											"path": "$['product_ean']"
										},
										"sink": {
											"ordinal": 4
										}
									},
									{
										"source": {
											"path": "$['product_reference']"
										},
										"sink": {
											"ordinal": 5
										}
									},
									{
										"source": {
											"path": "$['total_stock_quantity']"
										},
										"sink": {
											"ordinal": 6
										}
									},
									{
										"source": {
											"path": "$['total_ordered_quantity']"
										},
										"sink": {
											"ordinal": 7
										}
									},
									{
										"source": {
											"path": "$['total_assigned_quantity']"
										},
										"sink": {
											"ordinal": 8
										}
									},
									{
										"source": {
											"path": "$['total_unshipped_quantity']"
										},
										"sink": {
											"ordinal": 9
										}
									},
									{
										"source": {
											"path": "$['total_available_quantity']"
										},
										"sink": {
											"ordinal": 10
										}
									},
									{
										"source": {
											"path": "$['location']"
										},
										"sink": {
											"ordinal": 11
										}
									},
									{
										"source": {
											"path": "$['stock_on_location']"
										},
										"sink": {
											"ordinal": 12
										}
									},
									{
										"source": {
											"path": "$['stock_status']"
										},
										"sink": {
											"ordinal": 13
										}
									},
									{
										"source": {
											"path": "$['owner']"
										},
										"sink": {
											"ordinal": 14
										}
									},
									{
										"source": {
											"path": "$['purchase_order']"
										},
										"sink": {
											"ordinal": 15
										}
									},
									{
										"source": {
											"path": "$['sales_order']"
										},
										"sink": {
											"ordinal": 16
										}
									},
									{
										"source": {
											"path": "$['stockdate']"
										},
										"sink": {
											"ordinal": 17
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Json1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['version']"
										},
										"sink": {
											"ordinal": 1
										}
									},
									{
										"source": {
											"path": "$['doc_type']"
										},
										"sink": {
											"ordinal": 2
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['customer_order_number']"
										},
										"sink": {
											"ordinal": 3
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['secondary_order_number']"
										},
										"sink": {
											"ordinal": 4
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['currency']"
										},
										"sink": {
											"ordinal": 5
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['department_code']"
										},
										"sink": {
											"ordinal": 6
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['instructions']"
										},
										"sink": {
											"ordinal": 7
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['payment_term']"
										},
										"sink": {
											"ordinal": 8
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['supplier_id']"
										},
										"sink": {
											"ordinal": 9
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['cancelled']"
										},
										"sink": {
											"ordinal": 10
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['transaction_type_code']"
										},
										"sink": {
											"ordinal": 11
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['exchange_rate']"
										},
										"sink": {
											"ordinal": 12
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['exchange_currency']"
										},
										"sink": {
											"ordinal": 13
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['season']"
										},
										"sink": {
											"ordinal": 14
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['season_type']"
										},
										"sink": {
											"ordinal": 15
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_date']"
										},
										"sink": {
											"ordinal": 16
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['supplier_name']"
										},
										"sink": {
											"ordinal": 17
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['line_id']"
										},
										"sink": {
											"ordinal": 18
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['customer_product_id']"
										},
										"sink": {
											"ordinal": 19
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['customer_sku']"
										},
										"sink": {
											"ordinal": 20
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['country_of_origin']"
										},
										"sink": {
											"ordinal": 21
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['destination_warehouse']"
										},
										"sink": {
											"ordinal": 22
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['instructions']"
										},
										"sink": {
											"ordinal": 23
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['gross_weight_measure_code']"
										},
										"sink": {
											"ordinal": 24
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['packaging_description']"
										},
										"sink": {
											"ordinal": 25
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['total_pieces']"
										},
										"sink": {
											"ordinal": 26
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['quantity_requested']"
										},
										"sink": {
											"ordinal": 27
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['retail_price']"
										},
										"sink": {
											"ordinal": 28
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['unit_of_measure']"
										},
										"sink": {
											"ordinal": 29
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['units_per_pack']"
										},
										"sink": {
											"ordinal": 30
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['transaction_purpose_code']"
										},
										"sink": {
											"ordinal": 31
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['volume_per_unit_cbms']"
										},
										"sink": {
											"ordinal": 32
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['weight_per_unit_kgs']"
										},
										"sink": {
											"ordinal": 33
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['package_height_cms']"
										},
										"sink": {
											"ordinal": 34
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['package_width_cms']"
										},
										"sink": {
											"ordinal": 35
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['package_length_cms']"
										},
										"sink": {
											"ordinal": 36
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['inco_term']"
										},
										"sink": {
											"ordinal": 37
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['inco_term_named_place']"
										},
										"sink": {
											"ordinal": 38
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['sales_order_number']"
										},
										"sink": {
											"ordinal": 39
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['outer_pack_package_type_code']"
										},
										"sink": {
											"ordinal": 40
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['supplier_product_id']"
										},
										"sink": {
											"ordinal": 41
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['brand_code']"
										},
										"sink": {
											"ordinal": 42
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['buyer_reference']"
										},
										"sink": {
											"ordinal": 43
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['latest_in_dc_date']"
										},
										"sink": {
											"ordinal": 44
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['actual_in_dc_date']"
										},
										"sink": {
											"ordinal": 45
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['arrival_port']['unlocode']"
										},
										"sink": {
											"ordinal": 46
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['lading_port']['unlocode']"
										},
										"sink": {
											"ordinal": 47
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['addresses'][0]['name']"
										},
										"sink": {
											"ordinal": 48
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['addresses'][0]['target_party_id']"
										},
										"sink": {
											"ordinal": 49
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['addresses'][0]['address_type']"
										},
										"sink": {
											"ordinal": 50
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Json2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-14T12:47:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until_Fileexists",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('FileExists'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(activity('Get Metadata1').output.exists)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 10
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Copy data1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "FileExists",
													"value": true
												}
											},
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DelimitedText1",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DSemployeeCSV",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											}
										]
									}
								},
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"FileExists": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Trigger_test20241031"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-04T07:09:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDemo20221211')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FilterArraylistofValues",
						"type": "Filter",
						"dependsOn": [],
						"userProperties": [
							{
								"name": "Purpose",
								"value": "This is for Filter activity test!"
							}
						],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ListArrayvalues",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item(), 4)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterArraylistofValues",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.FolderList",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data to different folders",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "InputDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "dsParameterFoldername",
											"type": "DatasetReference",
											"parameters": {
												"OutFolder": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ListArrayvalues": {
						"type": "array",
						"defaultValue": [
							1,
							2,
							3,
							4,
							5,
							6,
							7
						]
					},
					"FolderList": {
						"type": "array",
						"defaultValue": [
							"Apple",
							"orange",
							"pear"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-11T11:05:38Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson11SCD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflowLesson11SCD",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowLesson11SCD",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCSV": {},
									"sinkAzureSQLDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T04:29:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson12Countfiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MetadataFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set variableFilecount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get MetadataFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileCount",
							"value": {
								"value": "@string(length(activity('Get MetadataFiles').output.childItems))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition filecountnumber",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variableFilecount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FileCount'),'9' )",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait False",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WaitTrue",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 9
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"FileCount": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T08:29:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson13AddAdditionalColumns')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Adding extra columns",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "Filename",
										"value": "$$FILEPATH"
									},
									{
										"name": "DupName",
										"value": "$$COLUMN:name"
									},
									{
										"name": "Pipeline",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									{
										"name": "Static",
										"value": "GoodIdea"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "gender",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "gender",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "salary",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "salary",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "department",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "department",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Filename",
											"type": "String"
										},
										"sink": {
											"name": "Filename",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DupName",
											"type": "String"
										},
										"sink": {
											"name": "DupName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Pipeline",
											"type": "String"
										},
										"sink": {
											"name": "Pipeline",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Static",
											"type": "String"
										},
										"sink": {
											"name": "Static",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsEmployee",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T08:46:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson14ConvertArray')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup emails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Lesson14emails",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachEmails",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup emails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup emails').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variableTmpEmails",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TmpEmail",
										"value": {
											"value": "@concat(item().email,';',variables('Emails'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variableEmails",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set variableTmpEmails",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Emails",
										"value": {
											"value": "@variables('TmpEmail')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Emails": {
						"type": "String"
					},
					"TmpEmail": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T09:18:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson15ConvertArrayByJoin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup emails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Lesson14emails",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachEmails",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup emails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup emails').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append variableEmailsArray",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "EmailsArray",
										"value": {
											"value": "@item().email",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set variable EmailsString",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEachEmails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "EmailsString",
							"value": {
								"value": "@join(variables('EmailsArray'),';')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"EmailsArray": {
						"type": "Array"
					},
					"EmailsString": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T13:56:38Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson17SCDpart2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflowLesson17SCDpart2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowLesson17SCDpart2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployee17": {},
									"sourceSQLTable": {},
									"sinkSQLTableNewdata": {},
									"sinkSQLTableUpdatedata": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T07:56:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson18CopyMultipleTablesBulk')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup AzureSQLTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select TABLE_SCHEMA,TABLE_NAME from information_schema.tables\nwhere TABLE_TYPE='BASE TABLE' AND TABLE_SCHEMA='dbo'\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTBLemployee",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach TabletoFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup AzureSQLTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup AzureSQLTables').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data TabletoFile",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTableParaSchemaTable",
											"type": "DatasetReference",
											"parameters": {
												"SchemaInput": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												},
												"TableInput": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CSVTaret",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T14:42:19Z"
			},
			"dependsOn": []
		}
	]
}