{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFchainplandev01"
		},
		"AzureSqlDatabasechainPlain_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabasechainPlain'"
		},
		"Linkedservice_dbastoreaccounttest_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Linkedservice_dbastoreaccounttest'"
		},
		"AKVtest_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "StoAcctdbastorageaccounttest-connstr"
		},
		"AzureKeyVault_storagetest_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-Chainplan-test.vault.azure.net/"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://restapi.adequateshop.com"
		},
		"RestServiceWEB_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dummy.restapiexample.com"
		},
		"trigger_Forappendtest20241103_properties_pipeline_SetVariable_activity20241103_parameters_FileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"trigger_Forappendtest20241103_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/e63f786f-80ef-4a49-86ff-1d3629fb8574/resourceGroups/research-ligentix/providers/Microsoft.Storage/storageAccounts/dbastorageaccounttest"
		},
		"trigger_eventtriggerdemo01_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/e63f786f-80ef-4a49-86ff-1d3629fb8574/resourceGroups/research-ligentix/providers/Microsoft.Storage/storageAccounts/dbastorageaccounttest"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Delete files older than 30 days')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Please input a folder path as the parameter for this pipeline, and the pipeline will delete files which were last modified more than 30 days ago under the particular folder path.",
				"activities": [
					{
						"name": "DeleteFiles",
						"description": "Connect to your storage account to save the log file.",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDatasetForDeleteActivity",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceDirectory",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "Linkedservice_dbastoreaccounttest",
									"type": "LinkedServiceReference"
								},
								"path": {
									"value": "@pipeline().parameters.LoggingPath",
									"type": "Expression"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeEnd": {
									"value": "@{adddays(pipeline().TriggerTime, -10)}",
									"type": "Expression"
								},
								"wildcardFileName": "*"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SourceFolder": {
						"type": "string",
						"defaultValue": "data"
					},
					"SourceDirectory": {
						"type": "string",
						"defaultValue": "output"
					},
					"LoggingPath": {
						"type": "string",
						"defaultValue": "data/output1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-24T08:54:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinaryDatasetForDeleteActivity')]",
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FirstCopyPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WaitWaitseconds",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.waitseconds",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"waitseconds": {
						"type": "int"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-06T01:59:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Lesson5_ForeachCopyDeletefiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata Input Folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DSinputDem",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata Input Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata Input Folder').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data Archive",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": "Input",
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DelimitedText3",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText4",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data Archive",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DelimitedText3",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@{item().name}",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "AllAboutBI"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-20T12:30:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSinputDem')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText3')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PLappendVariable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ListOfInput",
							"value": {
								"value": "@pipeline().parameters.paraINput",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Append variable2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('ListOfInput'),'abc' )\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WaitFalse",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Waittrue",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "Append variable2",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Append variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ListOfInput",
							"value": "\"OK\",\"NOK\""
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"paraINput": {
						"type": "string",
						"defaultValue": "ParaINput"
					}
				},
				"variables": {
					"ListOfInput": {
						"type": "Array",
						"defaultValue": [
							"abc",
							"de",
							"ghk"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-10T07:32:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipeLesson2GetSouceFilenames')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MetadataFilenames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CSVTaret",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get MetadataFilenames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get MetadataFilenames').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy dataFile",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "CSVtarget1",
											"type": "DatasetReference",
											"parameters": {
												"InputFilename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Lesson2output",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-29T03:36:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CSVTaret')]",
				"[concat(variables('factoryId'), '/datasets/CSVtarget1')]",
				"[concat(variables('factoryId'), '/datasets/Lesson2output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipeLesson2GetSouceFilenames_copy_issued')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MetadataFilenames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CSVTaret",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get MetadataFilenames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get MetadataFilenames').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy dataFile",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable Filename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "CSVtarget1",
											"type": "DatasetReference",
											"parameters": {
												"InputFilename": {
													"value": "@variables('VarFilename')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Lesson2output",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set variable Filename",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "VarFilename",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"VarFilename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-29T03:41:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CSVTaret')]",
				"[concat(variables('factoryId'), '/datasets/CSVtarget1')]",
				"[concat(variables('factoryId'), '/datasets/Lesson2output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeDFparameter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowDFparameterrize",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfParameter",
								"type": "DataFlowReference",
								"parameters": {
									"DFparaCountry": {
										"value": "'@{pipeline().parameters.ParacountryPipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceEmployeeCSV": {},
									"sinkOutputCSV": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ParacountryPipeline": {
						"type": "string",
						"defaultValue": "\"HK\""
					}
				},
				"folder": {
					"name": "StudyDemo"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-21T05:20:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfParameter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeGetMeta_Ifcondition')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MetadataStoragefile",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "If Condition CopyFolder1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "InputDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists",
								"itemName",
								"itemType",
								"lastModified",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get MetadataStoragefile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(formatDateTime(utcnow(),'yyyy-MM-dd'),\nformatDateTime(activity('Get MetadataStoragefile').output.lastModified,'yyyy-MM-dd')))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "FaleWait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "If Condition CopyFolder1",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(pipeline().parameters.IfCopyFolder1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WaitFolder2wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@pipeline().parameters.Folder2Wait",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WaitFolder1wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@pipeline().parameters.Folder1Wait",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"IfCopyFolder1": {
						"type": "bool",
						"defaultValue": false
					},
					"Folder1Wait": {
						"type": "int",
						"defaultValue": 1
					},
					"Folder2Wait": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-12T01:39:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeUntilactivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('FileExists')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "InputDataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata1').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Filename",
													"value": "kk.txt"
												}
											}
										]
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "If Condition1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "InputDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Outputdataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileExists",
										"value": true
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"FileExists": {
						"type": "Boolean",
						"defaultValue": false
					},
					"Filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-13T02:43:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputDataset')]",
				"[concat(variables('factoryId'), '/datasets/Outputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline Lesson16 Validate file Schema')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata Employee",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DSADFRealLesson16ParameterEmployee",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "EmployeeLesson16.csv"
								}
							},
							"fieldList": [
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Get Metadata EmployeeRef",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DSADFRealLesson16ParameterEmployee",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "EmployeeLesson16Ref.csv"
								}
							},
							"fieldList": [
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If ConditionSchemamaches",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata Employee",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Metadata EmployeeRef",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Metadata Employee').output.structure,activity('Get Metadata EmployeeRef').output.structure )",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "WaitFalse",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 2
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WaitTrue",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 5
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T14:21:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSADFRealLesson16ParameterEmployee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['product_number']"
										},
										"sink": {
											"ordinal": 1
										}
									},
									{
										"source": {
											"path": "$['product_description']"
										},
										"sink": {
											"ordinal": 2
										}
									},
									{
										"source": {
											"path": "$['product_description_2']"
										},
										"sink": {
											"ordinal": 3
										}
									},
									{
										"source": {
											"path": "$['product_ean']"
										},
										"sink": {
											"ordinal": 4
										}
									},
									{
										"source": {
											"path": "$['product_reference']"
										},
										"sink": {
											"ordinal": 5
										}
									},
									{
										"source": {
											"path": "$['total_stock_quantity']"
										},
										"sink": {
											"ordinal": 6
										}
									},
									{
										"source": {
											"path": "$['total_ordered_quantity']"
										},
										"sink": {
											"ordinal": 7
										}
									},
									{
										"source": {
											"path": "$['total_assigned_quantity']"
										},
										"sink": {
											"ordinal": 8
										}
									},
									{
										"source": {
											"path": "$['total_unshipped_quantity']"
										},
										"sink": {
											"ordinal": 9
										}
									},
									{
										"source": {
											"path": "$['total_available_quantity']"
										},
										"sink": {
											"ordinal": 10
										}
									},
									{
										"source": {
											"path": "$['location']"
										},
										"sink": {
											"ordinal": 11
										}
									},
									{
										"source": {
											"path": "$['stock_on_location']"
										},
										"sink": {
											"ordinal": 12
										}
									},
									{
										"source": {
											"path": "$['stock_status']"
										},
										"sink": {
											"ordinal": 13
										}
									},
									{
										"source": {
											"path": "$['owner']"
										},
										"sink": {
											"ordinal": 14
										}
									},
									{
										"source": {
											"path": "$['purchase_order']"
										},
										"sink": {
											"ordinal": 15
										}
									},
									{
										"source": {
											"path": "$['sales_order']"
										},
										"sink": {
											"ordinal": 16
										}
									},
									{
										"source": {
											"path": "$['stockdate']"
										},
										"sink": {
											"ordinal": 17
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Json1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['version']"
										},
										"sink": {
											"ordinal": 1
										}
									},
									{
										"source": {
											"path": "$['doc_type']"
										},
										"sink": {
											"ordinal": 2
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['customer_order_number']"
										},
										"sink": {
											"ordinal": 3
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['secondary_order_number']"
										},
										"sink": {
											"ordinal": 4
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['currency']"
										},
										"sink": {
											"ordinal": 5
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['department_code']"
										},
										"sink": {
											"ordinal": 6
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['instructions']"
										},
										"sink": {
											"ordinal": 7
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['payment_term']"
										},
										"sink": {
											"ordinal": 8
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['supplier_id']"
										},
										"sink": {
											"ordinal": 9
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['cancelled']"
										},
										"sink": {
											"ordinal": 10
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['transaction_type_code']"
										},
										"sink": {
											"ordinal": 11
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['exchange_rate']"
										},
										"sink": {
											"ordinal": 12
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['exchange_currency']"
										},
										"sink": {
											"ordinal": 13
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['season']"
										},
										"sink": {
											"ordinal": 14
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['season_type']"
										},
										"sink": {
											"ordinal": 15
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_date']"
										},
										"sink": {
											"ordinal": 16
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['supplier_name']"
										},
										"sink": {
											"ordinal": 17
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['line_id']"
										},
										"sink": {
											"ordinal": 18
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['customer_product_id']"
										},
										"sink": {
											"ordinal": 19
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['customer_sku']"
										},
										"sink": {
											"ordinal": 20
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['country_of_origin']"
										},
										"sink": {
											"ordinal": 21
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['destination_warehouse']"
										},
										"sink": {
											"ordinal": 22
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['instructions']"
										},
										"sink": {
											"ordinal": 23
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['gross_weight_measure_code']"
										},
										"sink": {
											"ordinal": 24
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['packaging_description']"
										},
										"sink": {
											"ordinal": 25
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['total_pieces']"
										},
										"sink": {
											"ordinal": 26
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['quantity_requested']"
										},
										"sink": {
											"ordinal": 27
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['retail_price']"
										},
										"sink": {
											"ordinal": 28
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['unit_of_measure']"
										},
										"sink": {
											"ordinal": 29
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['units_per_pack']"
										},
										"sink": {
											"ordinal": 30
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['transaction_purpose_code']"
										},
										"sink": {
											"ordinal": 31
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['volume_per_unit_cbms']"
										},
										"sink": {
											"ordinal": 32
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['weight_per_unit_kgs']"
										},
										"sink": {
											"ordinal": 33
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['package_height_cms']"
										},
										"sink": {
											"ordinal": 34
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['package_width_cms']"
										},
										"sink": {
											"ordinal": 35
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['package_length_cms']"
										},
										"sink": {
											"ordinal": 36
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['inco_term']"
										},
										"sink": {
											"ordinal": 37
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['inco_term_named_place']"
										},
										"sink": {
											"ordinal": 38
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['sales_order_number']"
										},
										"sink": {
											"ordinal": 39
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['outer_pack_package_type_code']"
										},
										"sink": {
											"ordinal": 40
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['supplier_product_id']"
										},
										"sink": {
											"ordinal": 41
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['brand_code']"
										},
										"sink": {
											"ordinal": 42
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['buyer_reference']"
										},
										"sink": {
											"ordinal": 43
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['latest_in_dc_date']"
										},
										"sink": {
											"ordinal": 44
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['actual_in_dc_date']"
										},
										"sink": {
											"ordinal": 45
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['arrival_port']['unlocode']"
										},
										"sink": {
											"ordinal": 46
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['order_lines'][0]['lading_port']['unlocode']"
										},
										"sink": {
											"ordinal": 47
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['addresses'][0]['name']"
										},
										"sink": {
											"ordinal": 48
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['addresses'][0]['target_party_id']"
										},
										"sink": {
											"ordinal": 49
										}
									},
									{
										"source": {
											"path": "$['orders'][0]['addresses'][0]['address_type']"
										},
										"sink": {
											"ordinal": 50
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Json2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-14T12:47:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/Json2')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until_Fileexists",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('FileExists'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(activity('Get Metadata1').output.exists)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 10
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Copy data1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "FileExists",
													"value": true
												}
											},
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DelimitedText1",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DSemployeeCSV",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											}
										]
									}
								},
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"FileExists": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Trigger_test20241031"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-04T07:09:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineCache')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowCache",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowCacheSink",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceLocalEmployee": {},
									"sourceEmployee": {},
									"sourceAzureSQLCountry": {},
									"sinkCache": {},
									"sinkcountryCache": {},
									"sinkAzureSQLLigentixEssentialService": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "StudyDemo"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-25T08:45:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowCacheSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineCallAggregrateDFL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowAggregate",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_Aggregate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployee": {},
									"sourceDept": {},
									"sinktoCSV": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-15T07:42:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_Aggregate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDFValidation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow DFValication",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfValidation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcetestcsv": {},
									"sinkOurputValidationCSV": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "StudyDemo"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-21T11:32:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfValidation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDFstringify')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowDFstringify",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfStringify",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceDemojson": {},
									"sinkOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "StudyDemo"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-27T00:02:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfStringify')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDemo20221211')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FilterArraylistofValues",
						"type": "Filter",
						"dependsOn": [],
						"userProperties": [
							{
								"name": "Purpose",
								"value": "This is for Filter activity test!"
							}
						],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ListArrayvalues",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item(), 4)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterArraylistofValues",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.FolderList",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data to different folders",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "InputDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "dsParameterFoldername",
											"type": "DatasetReference",
											"parameters": {
												"OutFolder": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ListArrayvalues": {
						"type": "array",
						"defaultValue": [
							1,
							2,
							3,
							4,
							5,
							6,
							7
						]
					},
					"FolderList": {
						"type": "array",
						"defaultValue": [
							"Apple",
							"orange",
							"pear"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-11T11:05:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputDataset')]",
				"[concat(variables('factoryId'), '/datasets/dsParameterFoldername')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineExecDFConditionSplit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Conditional split",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfConditionalSplit",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployee": {},
									"sinkAll": {},
									"sinkHRemployee": {},
									"sinkPayrollemployee": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-16T01:23:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfConditionalSplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineExecDataflowFirstTry')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow for First try",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowFirsttry",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployee": {},
									"sourceDeptment": {},
									"sinkOutData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-15T03:34:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowFirsttry')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineExecDerivedColumn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Derivedcolumn",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowDerivedcolumn",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployee": {},
									"sinkCSV": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-16T01:43:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowDerivedcolumn')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineExecdfAlterRow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Alter row",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfAlterRow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployeeWindow": {},
									"sinkAzurechainplaintest": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-19T05:44:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfAlterRow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineFailactivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "'failtest'",
							"errorCode": "2000"
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "StudyDemo"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-26T01:24:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineFilterDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow call Filter",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Filter",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceDept": {},
									"sinkCSV": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-15T07:07:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Filter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineGlobalParameter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().globalParameters.GlobalParaInputWaitseconds",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "StudyDemo"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-25T02:13:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson10WritelogtoFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WaitStart",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					},
					{
						"name": "Get MetadataLogfile",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set variableLogfile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADFRealLesson10",
								"type": "DatasetReference",
								"parameters": {
									"LogFileDS": {
										"value": "@variables('Filename')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set variableLogfile",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WaitStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@concat(formatDateTime(utcnow(),'yyyy-MM-dd'),'_log.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If ConditionLogfilenameExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get MetadataLogfile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get MetadataLogfile').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "dataflowLesson10",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "dataflowLesson10",
											"type": "DataFlowReference",
											"parameters": {
												"DataFactory": {
													"value": "'@{pipeline().DataFactory}'",
													"type": "Expression"
												},
												"PipeLine": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"RunId": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"TriggerName": {
													"value": "'@{pipeline().TriggerName}'",
													"type": "Expression"
												},
												"TriggerTime": {
													"value": "'@{pipeline().TriggerTime}'",
													"type": "Expression"
												},
												"TriggerType": {
													"value": "'@{pipeline().TriggerType}'",
													"type": "Expression"
												},
												"Status": {
													"value": "'@{'Success'}'",
													"type": "Expression"
												},
												"CurrentTime": {
													"value": "'@{utcnow()}'",
													"type": "Expression"
												},
												"DF_logfile": {
													"value": "'@{variables('Filename')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"sourceDummy": {},
												"sinkLogfile": {
													"LogFileDS": {
														"value": "@variables('Filename')",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "dataflowLesson10_Append",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "dataflowLesson10_Append",
											"type": "DataFlowReference",
											"parameters": {
												"DataFactory": {
													"value": "'@{pipeline().DataFactory}'",
													"type": "Expression"
												},
												"PipeLine": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"RunId": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"TriggerName": {
													"value": "'@{pipeline().TriggerName}'",
													"type": "Expression"
												},
												"TriggerTime": {
													"value": "'@{pipeline().TriggerTime}'",
													"type": "Expression"
												},
												"TriggerType": {
													"value": "'@{pipeline().TriggerType}'",
													"type": "Expression"
												},
												"Status": {
													"value": "'@{'Success'}'",
													"type": "Expression"
												},
												"CurrentTime": {
													"value": "'@{utcnow()}'",
													"type": "Expression"
												},
												"DF_logfile": {
													"value": "'@{variables('Filename')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"sourceDummy": {},
												"sourceLogfile": {
													"LogFileDS": {
														"value": "@variables('Filename')",
														"type": "Expression"
													}
												},
												"sinkLogfile": {
													"LogFileDS": {
														"value": "@variables('Filename')",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T02:11:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADFRealLesson10')]",
				"[concat(variables('factoryId'), '/dataflows/dataflowLesson10')]",
				"[concat(variables('factoryId'), '/dataflows/dataflowLesson10_Append')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson11SCD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflowLesson11SCD",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowLesson11SCD",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCSV": {},
									"sinkAzureSQLDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T04:29:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowLesson11SCD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson12Countfiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MetadataFiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set variableFilecount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get MetadataFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileCount",
							"value": {
								"value": "@string(length(activity('Get MetadataFiles').output.childItems))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition filecountnumber",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variableFilecount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FileCount'),'9' )",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait False",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WaitTrue",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 9
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"FileCount": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T08:29:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson13AddAdditionalColumns')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Adding extra columns",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "Filename",
										"value": "$$FILEPATH"
									},
									{
										"name": "DupName",
										"value": "$$COLUMN:name"
									},
									{
										"name": "Pipeline",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									{
										"name": "Static",
										"value": "GoodIdea"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "gender",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "gender",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "salary",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "salary",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "department",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "department",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Filename",
											"type": "String"
										},
										"sink": {
											"name": "Filename",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DupName",
											"type": "String"
										},
										"sink": {
											"name": "DupName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Pipeline",
											"type": "String"
										},
										"sink": {
											"name": "Pipeline",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Static",
											"type": "String"
										},
										"sink": {
											"name": "Static",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dsEmployee",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T08:46:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsEmployee')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson14ConvertArray')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup emails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Lesson14emails",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachEmails",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup emails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup emails').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variableTmpEmails",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TmpEmail",
										"value": {
											"value": "@concat(item().email,';',variables('Emails'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variableEmails",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set variableTmpEmails",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Emails",
										"value": {
											"value": "@variables('TmpEmail')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Emails": {
						"type": "String"
					},
					"TmpEmail": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T09:18:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Lesson14emails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson15ConvertArrayByJoin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup emails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Lesson14emails",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachEmails",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup emails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup emails').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append variableEmailsArray",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "EmailsArray",
										"value": {
											"value": "@item().email",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set variable EmailsString",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEachEmails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "EmailsString",
							"value": {
								"value": "@join(variables('EmailsArray'),';')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"EmailsArray": {
						"type": "Array"
					},
					"EmailsString": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T13:56:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Lesson14emails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson17SCDpart2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflowLesson17SCDpart2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowLesson17SCDpart2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployee17": {},
									"sourceSQLTable": {},
									"sinkSQLTableNewdata": {},
									"sinkSQLTableUpdatedata": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T07:56:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowLesson17SCDpart2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson18CopyMultipleTablesBulk')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup AzureSQLTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select TABLE_SCHEMA,TABLE_NAME from information_schema.tables\nwhere TABLE_TYPE='BASE TABLE' AND TABLE_SCHEMA='dbo'\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTBLemployee",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach TabletoFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup AzureSQLTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup AzureSQLTables').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data TabletoFile",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTableParaSchemaTable",
											"type": "DatasetReference",
											"parameters": {
												"SchemaInput": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												},
												"TableInput": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CSVTaret",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T14:42:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTBLemployee')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableParaSchemaTable')]",
				"[concat(variables('factoryId'), '/datasets/CSVTaret')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson18CopyMultipleTablesBulk_toTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup AzureSQLTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select 'dbo' as TABLE_SCHEMA,name as TABLE_NAME   from sys.objects\nwhere name in (\n'vw_employee',\n'employee')\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTBLemployee",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach TabletoTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup AzureSQLTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup AzureSQLTables').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data TabletoTable",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable DropTableName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('DROP TABLE IF EXISTS ',variables('SinkSchema'),'.',variables('DropTableName'))}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTableParaSchemaTable",
											"type": "DatasetReference",
											"parameters": {
												"SchemaInput": {
													"value": "@variables('SourceSchema')",
													"type": "Expression"
												},
												"TableInput": {
													"value": "@variables('DropTableName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTableParaSchemaTable",
											"type": "DatasetReference",
											"parameters": {
												"SchemaInput": {
													"value": "@variables('SinkSchema')",
													"type": "Expression"
												},
												"TableInput": {
													"value": "@variables('DropTableName')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable DropTableName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "DropTableName",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy data TabletoTable_Backup",
									"type": "Copy",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('DROP TABLE IF EXISTS shadow.',variables('DropTableName'))}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTableParaSchemaTable",
											"type": "DatasetReference",
											"parameters": {
												"SchemaInput": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												},
												"TableInput": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTableParaSchemaTable",
											"type": "DatasetReference",
											"parameters": {
												"SchemaInput": "shadow",
												"TableInput": "@item().TABLE_NAME"
											}
										}
									]
								},
								{
									"name": "Set variable Source Schema",
									"type": "SetVariable",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SourceSchema",
										"value": {
											"value": "dbo",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable Sink Schema",
									"type": "SetVariable",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SinkSchema",
										"value": "shadow_OK"
									}
								}
							]
						}
					},
					{
						"name": "Lookup AzureSQLTables_backup",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select TABLE_SCHEMA,TABLE_NAME from information_schema.tables\nwhere TABLE_TYPE='BASE TABLE' AND TABLE_SCHEMA='dbo'\nand TABLE_NAME IN (\n'Logins',\n'EmailLog',\n'employee'\n)",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTBLemployee",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"DropTableName": {
						"type": "String"
					},
					"SourceSchema": {
						"type": "String",
						"defaultValue": "dbo"
					},
					"SinkSchema": {
						"type": "String",
						"defaultValue": "shadow_OK"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2024-06-12T13:13:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTBLemployee')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableParaSchemaTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson19SPwithOutputparam')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup exec sp with output param",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "declare @empTotal int\nexecute spGetEmpCountByGender 'Female', @empTotal output\nselect @empTotal as EmpTotal\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTablecountry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition Output",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup exec sp with output param",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup exec sp with output param').output.firstRow['EmpTotal'],14 )",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait False",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "WaitTrue",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 14
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-01T15:25:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablecountry')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson20GetLatestfileandProcess')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MetadataChilditems",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get MetadataChilditems",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get MetadataChilditems').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get MetadataLatestDate",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "OutputParameter",
											"type": "DatasetReference",
											"parameters": {
												"Filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"lastModified",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If ConditionGreaterThanlateupdate",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get MetadataLatestDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(formatDateTime(activity('Get MetadataLatestDate').output.lastModified,'yyyyMMddHHmmss'),\nformatDateTime(variables('Previousupdatetime'),'yyyyMMddHHmmss'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set variable Latest Filename",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "latestFilename",
													"value": {
														"value": "@activity('Get MetadataLatestDate').output.itemName",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set variable Previous update",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Set variable Latest Filename",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Previousupdatetime",
													"value": {
														"value": "@activity('Get MetadataLatestDate').output.lastModified",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"latestFilename": {
						"type": "String"
					},
					"Previousupdatetime": {
						"type": "String",
						"defaultValue": "1990-01-01T05:12:22Z"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-02T01:56:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]",
				"[concat(variables('factoryId'), '/datasets/OutputParameter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson21DynamicColumnMapping')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata Lesson21",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Lesson21Storage",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata Lesson21",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata Lesson21').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data Mapping",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Lookup Tables",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(activity('Lookup Tables').output.firstRow.jsonMapping)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "Lesson21StorageParameter",
											"type": "DatasetReference",
											"parameters": {
												"Lesson21Filename": {
													"value": "@activity('Lookup Tables').output.firstRow.sourceFile",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Lesson21AzureSQLparameter",
											"type": "DatasetReference",
											"parameters": {
												"Schema": {
													"value": "activity('Lookup Tables').output.firstRow.sinkTableSchema",
													"type": "Expression"
												},
												"Table": {
													"value": "activity('Lookup Tables').output.firstRow.sinkTableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Lookup Tables",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from tbl_mappings where sourceFile='@{item().name}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlTableParaSchemaTable",
											"type": "DatasetReference",
											"parameters": {
												"SchemaInput": "dbo",
												"TableInput": "tbl_mappings"
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-02T08:52:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Lesson21Storage')]",
				"[concat(variables('factoryId'), '/datasets/Lesson21StorageParameter')]",
				"[concat(variables('factoryId'), '/datasets/Lesson21AzureSQLparameter')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableParaSchemaTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson23SendEmailafterfails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Fails make",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OutputParameter",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "ok.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Web Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data Fails make",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": "https://prod-26.centralus.logic.azure.com:443/workflows/5011cba0cab24e6ba549b0b56f39086b/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=j6TlQUqdJ6RaAC2RtPDZluni4uCx_C6_TfNYjDyECCI",
							"body": {
								"value": "{\n \"Pipeline\":\"@{pipeline().Pipeline}\",\n \"ErrorMessage\":\"@{activity('Copy data Fails make').Error.Message}\",\n \"DataFactoryName\":\"@{pipeline().DataFactory}\",\n \"Runid\":\"@{pipeline().RunId}\"\n}\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-04T01:35:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OutputParameter')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson27Round')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable round",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RoundNumber",
							"value": {
								"value": "@string(div(float(split(string(mul(123.45325, 100)),'.')[0]),100))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"RoundNumber": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-04T03:39:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson29FailureActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Set1",
							"value": "ok"
						}
					},
					{
						"name": "Set variable1-1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Set1",
							"value": {
								"value": "@int('1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1-1-1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable1-1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Set1",
							"value": "good idea"
						}
					},
					{
						"name": "Send email set1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Set variable1-1-1",
								"dependencyConditions": [
									"Skipped",
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Send email set2",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Wait Dummy",
								"dependencyConditions": [
									"Skipped",
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "set2",
							"value": "it's ok"
						}
					},
					{
						"name": "Set variable2-2",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "set2",
							"value": {
								"value": "@int('1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2-2-2",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "set2",
							"value": "what?"
						}
					},
					{
						"name": "Wait Dummy",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Set variable2",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set variable2-2",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set variable2-2-2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Set1": {
						"type": "String"
					},
					"set2": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-05T01:51:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson30Failuretaken')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Set1",
							"value": {
								"value": "@int('1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1-1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Set1",
							"value": {
								"value": "@int('1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1-1-1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable1-1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Set1",
							"value": "good idea"
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "set2",
							"value": "it's ok"
						}
					},
					{
						"name": "Set variable2-2",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "set2",
							"value": {
								"value": "@int('1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2-2-2",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "set2",
							"value": {
								"value": "@int('1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Wait Dummy",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Set variable2",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set variable2-2",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set variable2-2-2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Set variable Message1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable1-1-1",
								"dependencyConditions": [
									"Skipped",
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorMessageSet1",
							"value": {
								"value": "@concat(activity('Set variable1')?.Error?.message,'|',\n        activity('Set variable1-1')?.Error?.message,'|',\n        activity('Set variable1-1-1')?.Error?.message)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable Message2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Wait Dummy",
								"dependencyConditions": [
									"Skipped",
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorMessageSet2",
							"value": {
								"value": "@concat(activity('Set variable2')?.Error?.message,'|',\n        activity('Set variable2-2')?.Error?.message,'|',\n        activity('Set variable2-2-2')?.Error?.message,'|',\n        activity('Wait Dummy')?.Error?.message)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Set1": {
						"type": "String"
					},
					"set2": {
						"type": "String"
					},
					"ErrorMessageSet1": {
						"type": "String"
					},
					"ErrorMessageSet2": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-05T03:00:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson32')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachIdaccount",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1, pipeline().parameters.MaxEmployId)",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy dataWebToCSV",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['data']['id']"
													},
													"sink": {
														"name": "id"
													}
												},
												{
													"source": {
														"path": "$['data']['employee_name']"
													},
													"sink": {
														"name": "employee_name"
													}
												},
												{
													"source": {
														"path": "$['data']['employee_salary']"
													},
													"sink": {
														"name": "employee_salary"
													}
												},
												{
													"source": {
														"path": "$['data']['employee_age']"
													},
													"sink": {
														"name": "employee_age"
													}
												},
												{
													"source": {
														"path": "$['data']['profile_image']"
													},
													"sink": {
														"name": "profile_image"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "RestResourceWEBpage",
											"type": "DatasetReference",
											"parameters": {
												"PageNumber": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Lesson21StorageParameter",
											"type": "DatasetReference",
											"parameters": {
												"Lesson21Filename": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MaxEmployId": {
						"type": "int",
						"defaultValue": 9
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-06T03:05:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResourceWEBpage')]",
				"[concat(variables('factoryId'), '/datasets/Lesson21StorageParameter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson33LoadCSVtoJSON')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflowLesson33LoadCSVtoJSON",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowLesson33LoadCSVtoJSON",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCustCSV": {},
									"sinkJson": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-06T03:54:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowLesson33LoadCSVtoJSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson34SynaPassExplressionToDF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Filerule",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DSFilerule",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Filerule",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Filerule').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "dataflowLesson34PassExpression",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "dataflowLesson34PassExpression",
											"type": "DataFlowReference",
											"parameters": {
												"FileExpression": {
													"value": "'@{item().rule}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"sourceFileName": {
													"Filename": {
														"value": "@item().filename",
														"type": "Expression"
													}
												},
												"sinkoutputfile": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-06T08:12:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSFilerule')]",
				"[concat(variables('factoryId'), '/dataflows/dataflowLesson34PassExpression')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson35')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Lesson35",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowLesson35",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceSource": {},
									"sourceTarget": {},
									"sinkNotexisted": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-06T09:17:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowLesson35')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson36LookupRunSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "select * from [dbo].[tb_country]\ngo\ncreate table dbo.okk\n(id int)\ngo\ncreate table dbo.okk1\n(id int)\nselect 1 as 'abcd'\ngo\ncreate schema ligentia\nselect 1 as 'abcd'\ngo\ndeclare @sql nvarchar(500)\nset @sql='create schema ligentia1'\nexec sp_executesql @sql\nselect 1 as 'abcd'\ngo\n\n\n\n\n",
				"activities": [
					{
						"name": "LookupRunsql",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "declare @sql nvarchar(500)\nset @sql='create schema ligentia1'\nexec sp_executesql @sql\nselect 1 as 'abcd'\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTablecountry",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-06T04:36:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablecountry')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson37WeekdayOr not')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable Today",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Today",
							"value": {
								"value": "@string(dayOfWeek(utcNow()))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition Weekday",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variable Today",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains('12345',variables('Today'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait Weekend",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@int(variables('Today'))",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Wait Weekday",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": {
											"value": "@int(variables('Today'))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Today": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-06T09:31:38Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson38CallbyLogicApp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WaitCallfromLogicApp",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().globalParameters.GlobalParaInputWaitseconds",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"WaitSeconds": {
						"type": "int"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-06T01:52:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson3Deleteoldfiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MetadataFilenames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Lesson2output",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeEnd": {
									"value": "@addminutes(utcnow(),-10)",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach Filename",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get MetadataFilenames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get MetadataFilenames').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data Filename",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ""
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "LessonoutputParameter",
											"type": "DatasetReference",
											"parameters": {
												"InputFilename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Lesson3Output",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "DeleteFilename",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data Filename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "OutputFilenamepara",
											"type": "DatasetReference",
											"parameters": {
												"Filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-29T04:44:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Lesson2output')]",
				"[concat(variables('factoryId'), '/datasets/LessonoutputParameter')]",
				"[concat(variables('factoryId'), '/datasets/Lesson3Output')]",
				"[concat(variables('factoryId'), '/datasets/OutputFilenamepara')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson40')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "https://web.postman.co/workspace/My-Workspace~e321f6ec-b5d8-4b88-8626-4ecd7b31f824/request/24081729-0a9a82ea-df3a-4e88-9c73-22dd3920cd95\n\nhttps://www.appsloveworld.com/sample-rest-api-url-for-testing-with-authentication#huserregistration",
				"activities": [
					{
						"name": "Web Login",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "http://restapi.adequateshop.com/api/authaccount/login",
							"body": {
								"email": "Sailkkk@gmail.com",
								"password": 123456
							}
						}
					},
					{
						"name": "Web Get all users",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Web Login",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('Web Login').output.data.Token}",
									"type": "Expression"
								}
							},
							"url": "http://restapi.adequateshop.com/api/users?page=1"
						}
					},
					{
						"name": "Copy data Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Web Login",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "Bearer @{activity('Web Login').output.data.Token}",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "WebAPI",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "JsonOutputLesson40",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-07T06:37:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WebAPI')]",
				"[concat(variables('factoryId'), '/datasets/JsonOutputLesson40')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson41')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MetadataInput",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceFolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Get Metadata Output",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "OutputFolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter Compare",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get MetadataInput",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Metadata Output",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get MetadataInput').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(contains(activity('Get Metadata Output').output.childItems, activity('Get MetadataInput').output.childItems))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach Notexisted files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Compare",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Compare').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data InputtoOutput",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DSparaInput",
											"type": "DatasetReference",
											"parameters": {
												"Filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DSOutputPara",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-07T04:00:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceFolder')]",
				"[concat(variables('factoryId'), '/datasets/OutputFolder')]",
				"[concat(variables('factoryId'), '/datasets/DSparaInput')]",
				"[concat(variables('factoryId'), '/datasets/DSOutputPara')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson43DynamicSQLPara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupWaterMark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select WaterMark from dbo.Lesson43test where Uname='oooo'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTableParaSchemaTable",
								"type": "DatasetReference",
								"parameters": {
									"SchemaInput": "dbo",
									"TableInput": "Lesson43test"
								}
							}
						}
					},
					{
						"name": "Set variable WaterMark",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ParaWaterMark",
							"value": {
								"value": "\\'@{activity('LookupWaterMark').output.firstRow.WaterMark}\\'",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow Input Watermark",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Set variable WaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowLesson43InputDynamicSQLpara",
								"type": "DataFlowReference",
								"parameters": {
									"dfInputWatermark": {
										"value": "'@{variables('ParaWaterMark')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceAzureSQLWatermark": {},
									"sinkCache": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"ParaWaterMark": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-07T07:26:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableParaSchemaTable')]",
				"[concat(variables('factoryId'), '/dataflows/dataflowLesson43InputDynamicSQLpara')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson44DeleteFileSize')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata Output Folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dsLesson44outputFolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata Output Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata Output Folder').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata each file",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "Set variableFilename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DSLesson44DBsize",
											"type": "DatasetReference",
											"parameters": {
												"Filename": {
													"value": "@variables('Filename')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition Size 100",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata each file",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get Metadata each file').output.size,100)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait False",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Wait True",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											},
											{
												"name": "Delete 100size",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "Wait True",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DSLesson44DBsize",
														"type": "DatasetReference",
														"parameters": {
															"Filename": {
																"value": "@variables('Filename')",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								},
								{
									"name": "Set variableFilename",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Filename",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-07T08:12:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsLesson44outputFolder')]",
				"[concat(variables('factoryId'), '/datasets/DSLesson44DBsize')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson45ExceltoCSVfiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until no sheet in Excel",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('IsError')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable tempCounter",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "tempCounter",
										"value": {
											"value": "@string(add(int(variables('counter')), 1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy data Sheet",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable tempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DSLesson45ExcelParamSheet",
											"type": "DatasetReference",
											"parameters": {
												"sheetindex": {
													"value": "@int(variables('counter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dslesson45output",
											"type": "DatasetReference",
											"parameters": {
												"outputfilename": {
													"value": "@concat(string(variables('counter')),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variablecounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy data Sheet",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "counter",
										"value": {
											"value": "@variables('tempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable Iserror",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy data Sheet",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "IsError",
										"value": {
											"value": "@bool(1)",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Wait showsuccess",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Until no sheet in Excel",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"counter": {
						"type": "String",
						"defaultValue": "0"
					},
					"IsError": {
						"type": "Boolean"
					},
					"tempCounter": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-07T09:01:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSLesson45ExcelParamSheet')]",
				"[concat(variables('factoryId'), '/datasets/dslesson45output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson6WriteLogtoSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Stored procedureLogtoselfhosttable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dsfafea",
							"storedProcedureParameters": {
								"DataFactory": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pipeline": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabasechainPlain",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-12T08:51:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabasechainPlain')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLesson8Increemntcolumn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfLesson8IncrementKeys",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfLesson8IncrementKeys",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployee20221231": {},
									"sourceAllEmployee": {},
									"sinkAllemployee": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-31T01:49:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfLesson8IncrementKeys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLessonForIncreasementCopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Increasemently",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@adddays(utcnow(),-2)",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"wildcardFolderPath": "Lesson3Output",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Lesson3Outputfiles",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Lesson4Output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-29T05:01:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Lesson3Outputfiles')]",
				"[concat(variables('factoryId'), '/datasets/Lesson4Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineLookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDemo",
						"description": "Just for testing 12/14/2022",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "ExcelTblOutputFolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy datadataBased excel output",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupDemo",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "InputDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dsParameterFoldername",
								"type": "DatasetReference",
								"parameters": {
									"OutFolder": {
										"value": "@activity('LookupDemo').output.firstRow.FolderName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ForEachAllFolders",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDemo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDemo').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "InputDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "dsParameterFoldername",
											"type": "DatasetReference",
											"parameters": {
												"OutFolder": {
													"value": "@item().FolderName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T01:04:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ExcelTblOutputFolder')]",
				"[concat(variables('factoryId'), '/datasets/InputDataset')]",
				"[concat(variables('factoryId'), '/datasets/dsParameterFoldername')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineReadJsonTooneActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get MetadataInputAllfiles",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dsSource",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachGetEachfilename",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get MetadataInputAllfiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get MetadataInputAllfiles').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variableFilename",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "EachFilename",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"FolderOut": {
						"type": "String",
						"defaultValue": "output"
					},
					"EachFilename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "StudyDemo"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-24T08:37:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineStudydemo01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variableFiletype",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileType",
							"value": {
								"value": "@replace(pipeline().parameters.Flename,'Sales','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition Filetype Daily",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "SwitchFiletype",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FileType'),'Daily')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data Daily",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "dsSource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "dsTarget",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "SwitchFiletype",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Set variableFiletype",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@replace(variables('FileType'), 'Sales','' )",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Daily",
									"activities": [
										{
											"name": "Daily Execute Pipeline",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "FirstCopyPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "Hourly",
									"activities": [
										{
											"name": "Hourly Execute Pipeline",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "FirstCopyPipeline",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Wait2",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Flename": {
						"type": "string",
						"defaultValue": "HourlySales"
					}
				},
				"variables": {
					"FileType": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-12T09:00:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsSource')]",
				"[concat(variables('factoryId'), '/datasets/dsTarget')]",
				"[concat(variables('factoryId'), '/pipelines/FirstCopyPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineSwitch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FolderSwitch - Set variable",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FolderSwitch",
							"value": {
								"value": "@pipeline().parameters.FolderSwitchPara",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "FolderSwitch - Set variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@variables('FolderSwitch')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "FF1",
									"activities": [
										{
											"name": "Copy dataFF1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "InputDataset",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "dsParameterFoldername",
													"type": "DatasetReference",
													"parameters": {
														"OutFolder": {
															"value": "@pipeline().parameters.FFolder1",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "FF2",
									"activities": [
										{
											"name": "Copy dataFF2",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "InputDataset",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "dsParameterFoldername",
													"type": "DatasetReference",
													"parameters": {
														"OutFolder": {
															"value": "@pipeline().parameters.FFolder2",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FFolder1": {
						"type": "string",
						"defaultValue": "FFolder1"
					},
					"FFolder2": {
						"type": "string",
						"defaultValue": "FFolder2"
					},
					"FolderSwitchPara": {
						"type": "string",
						"defaultValue": "FF1"
					}
				},
				"variables": {
					"FolderSwitch": {
						"type": "String",
						"defaultValue": "F1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-13T06:49:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputDataset')]",
				"[concat(variables('factoryId'), '/datasets/dsParameterFoldername')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineValication')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Validation1",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "InputDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.00:01:00",
							"sleep": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:12:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineWebActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Web2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@variables('WebAddress')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Web2",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://dummy.restapiexample.com/api/v1/create",
							"body": {
								"name": "Mike",
								"salary": "99",
								"age": "99"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"WebAddress": {
						"type": "String",
						"defaultValue": "https://dummy.restapiexample.com/api/v1/employees"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-13T03:09:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineWebTableExtract')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy dataFromWebTable",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Column1",
											"type": "String"
										},
										"sink": {
											"name": "Column1",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Column2",
											"type": "String"
										},
										"sink": {
											"name": "Column2",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTBLemployee",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-12T08:51:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTBLemployee')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_GitSecond')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait_second",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-04T12:26:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_Github_firsttest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Wait2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Wait2",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-04T12:35:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_Lesson16')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Append set/variables",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Lesson3Outputfiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Filenames",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Append variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Filenames_copy",
										"value": {
											"value": "@variables('Filenames')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Filenames": {
						"type": "Array"
					},
					"Filenames_copy": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "AllAboutBI"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-22T07:52:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Lesson3Outputfiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_SetVariable_activity20241103')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable Filename",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileType",
							"value": {
								"value": "@replace(pipeline().parameters.FileName,'Sailes.csv','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition FileName",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variable Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FileType'),' Hourly')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set variableNo",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "IfNotGetValue",
										"value": {
											"value": "@concat(variables('FileType'),'inNoCondition')",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set variableYes",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "IfYesGetValue",
										"value": {
											"value": "@concat(variables('FileType'),'_inYesCondition')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"variables": {
					"FileType": {
						"type": "String"
					},
					"IfYesGetValue": {
						"type": "String"
					},
					"IfNotGetValue": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Trigger_test20241031"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-03T10:11:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_copydata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Eventtriggertest",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dsSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dsTarget",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-05T02:47:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsSource')]",
				"[concat(variables('factoryId'), '/datasets/dsTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_lesson10-15')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('Tablenames')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Tablenames": {
						"type": "Array",
						"defaultValue": [
							"ok",
							"nok",
							"test"
						]
					}
				},
				"folder": {
					"name": "AllAboutBI"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-22T07:42:38Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_lesson24Until')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('UntilVariable'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								},
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "select tt as status from kk",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlTBLemployee",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Lookup1').output.firstRow.status,'Y')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UntilVariable",
													"value": "True"
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Wait2",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Until1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"UntilVariable": {
						"type": "String",
						"defaultValue": "False"
					}
				},
				"folder": {
					"name": "AllAboutBI"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-22T08:44:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTBLemployee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_scheduletrigger_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait 180s",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 420
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Trigger_test20241031"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-31T11:36:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinedfWriteCacheSinktoPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flowdfWriteCacheSinktoPipeline",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfWriteCacheSinktoPipeline",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployee": {},
									"sinkMaxSalaryCache": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Set variableMaxSalaryFromDataflow",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flowdfWriteCacheSinktoPipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipeMaxSalary",
							"value": {
								"value": "@string(activity('Data flowdfWriteCacheSinktoPipeline').output.runStatus.output.sinkMaxSalaryCache.value[0].MaxSary)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"PipeMaxSalary": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-26T01:56:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfWriteCacheSinktoPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTBLemployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabasechainPlain",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Empid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmpName",
						"type": "varchar"
					},
					{
						"name": "Gender",
						"type": "varchar"
					},
					{
						"name": "Salary",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Department",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_Employees"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabasechainPlain')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableEmployeeSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabasechainPlain",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "empid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empname",
						"type": "nvarchar"
					},
					{
						"name": "gender",
						"type": "nvarchar"
					},
					{
						"name": "dept",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SQLLesson21_Employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabasechainPlain')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableLesson43')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabasechainPlain",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Category"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabasechainPlain')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableParaSchemaTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabasechainPlain",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaInput": {
						"type": "string"
					},
					"TableInput": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "empId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empName",
						"type": "nvarchar"
					},
					{
						"name": "skills",
						"type": "nvarchar"
					},
					{
						"name": "address",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaInput",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableInput",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabasechainPlain')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTablecountry')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabasechainPlain",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "contryid",
						"type": "varchar"
					},
					{
						"name": "countryname",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tb_country"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabasechainPlain')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTabletbl_employee20221226')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabasechainPlain",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "empId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empName",
						"type": "nvarchar"
					},
					{
						"name": "skills",
						"type": "nvarchar"
					},
					{
						"name": "address",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_employee20221226"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabasechainPlain')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDatasetForDeleteActivity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connect to your source store to delete files.",
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSVTaret')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSVoutputJoinemployeedept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSVtarget1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputFilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().InputFilename",
							"type": "Expression"
						},
						"folderPath": "output",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSADFRealLesson16ParameterEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": "ADF_Real",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					},
					{
						"name": "dept",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSFilerule')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Filerule.csv",
						"folderPath": "ADF_Real/Lesson34",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "filename",
						"type": "String"
					},
					{
						"name": "rule",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSLandedCost')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ETL_SampleTEST.txt",
						"folderPath": "Input",
						"container": "data"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSLesson44DBsize')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": "output",
						"container": "data"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSLesson45ExcelParamSheet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sheetindex": {
						"type": "int"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Lesson45.xlsx",
						"folderPath": "ADF_Real/Lesson45",
						"container": "data"
					},
					"sheetIndex": {
						"value": "@dataset().sheetindex",
						"type": "Expression"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSOutputPara')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "data"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADFRealLesson10')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LogFileDS": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().LogFileDS",
							"type": "Expression"
						},
						"folderPath": "Log",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSdeptmentCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "department.csv",
						"folderPath": "Input",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "depid",
						"type": "String"
					},
					{
						"name": "depname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSdptmentAKVtest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AKVtest",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDemo"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "department.csv",
						"folderPath": "Input",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AKVtest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSemployeeCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee.csv",
						"folderPath": "Input",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "deptment",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSinputDem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Input",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSparaInput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": "Input",
						"container": "data"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DSparameterfilenameLesson34')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": "ADF_Real/Lesson34",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DStestCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "text.csv",
						"folderPath": "Input",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PO",
						"type": "String"
					},
					{
						"name": "Vendor",
						"type": "String"
					},
					{
						"name": "Apple",
						"type": "String"
					},
					{
						"name": "Mango",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "kk.csv",
						"folderPath": "jsontarget",
						"container": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "kkkk.csv",
						"folderPath": "jsonfile",
						"container": "files"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Input",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Archive20230320",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DummyLesson10')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Dummy.txt",
						"folderPath": "ADF_Real",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeWindowCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EmployeeWindow.csv",
						"folderPath": "Input",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExcelTblOutputFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Tbl_OutputFolder.xlsx",
						"folderPath": "Input",
						"container": "data"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "FolderName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "data.txt",
						"folderPath": "Input",
						"container": "data"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "exportstk20230210160005.json",
						"container": "json"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"product_number": {
							"type": "integer"
						},
						"product_description": {
							"type": "string"
						},
						"product_description_2": {
							"type": "null"
						},
						"product_ean": {
							"type": "null"
						},
						"product_reference": {
							"type": "string"
						},
						"total_stock_quantity": {
							"type": "string"
						},
						"total_ordered_quantity": {
							"type": "string"
						},
						"total_assigned_quantity": {
							"type": "string"
						},
						"total_unshipped_quantity": {
							"type": "string"
						},
						"total_available_quantity": {
							"type": "string"
						},
						"location": {
							"type": "string"
						},
						"stock_on_location": {
							"type": "string"
						},
						"stock_status": {
							"type": "string"
						},
						"owner": {
							"type": "string"
						},
						"purchase_order": {
							"type": "string"
						},
						"sales_order": {
							"type": "string"
						},
						"stockdate": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "097349a6-e703-4a29-a447-dc95790f69bd.json",
						"container": "json"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"version": {
							"type": "string"
						},
						"doc_type": {
							"type": "string"
						},
						"orders": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"customer_order_number": {
										"type": "string"
									},
									"secondary_order_number": {
										"type": "string"
									},
									"currency": {
										"type": "string"
									},
									"department_code": {
										"type": "string"
									},
									"instructions": {
										"type": "string"
									},
									"payment_term": {
										"type": "string"
									},
									"supplier_id": {
										"type": "string"
									},
									"cancelled": {
										"type": "boolean"
									},
									"transaction_type_code": {
										"type": "string"
									},
									"exchange_rate": {
										"type": "integer"
									},
									"exchange_currency": {
										"type": "string"
									},
									"season": {
										"type": "string"
									},
									"season_type": {
										"type": "string"
									},
									"order_date": {
										"type": "string"
									},
									"supplier_name": {
										"type": "string"
									},
									"order_lines": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"line_id": {
													"type": "string"
												},
												"customer_product_id": {
													"type": "string"
												},
												"customer_sku": {
													"type": "string"
												},
												"country_of_origin": {
													"type": "string"
												},
												"destination_warehouse": {
													"type": "string"
												},
												"instructions": {
													"type": "string"
												},
												"gross_weight_measure_code": {
													"type": "string"
												},
												"packaging_description": {
													"type": "string"
												},
												"total_pieces": {
													"type": "integer"
												},
												"quantity_requested": {
													"type": "integer"
												},
												"retail_price": {
													"type": "number"
												},
												"unit_of_measure": {
													"type": "string"
												},
												"units_per_pack": {
													"type": "integer"
												},
												"transaction_purpose_code": {
													"type": "string"
												},
												"volume_per_unit_cbms": {
													"type": "number"
												},
												"weight_per_unit_kgs": {
													"type": "number"
												},
												"package_height_cms": {
													"type": "integer"
												},
												"package_width_cms": {
													"type": "integer"
												},
												"package_length_cms": {
													"type": "integer"
												},
												"inco_term": {
													"type": "string"
												},
												"inco_term_named_place": {
													"type": "string"
												},
												"sales_order_number": {
													"type": "string"
												},
												"outer_pack_package_type_code": {
													"type": "string"
												},
												"supplier_product_id": {
													"type": "string"
												},
												"brand_code": {
													"type": "string"
												},
												"buyer_reference": {
													"type": "string"
												},
												"latest_in_dc_date": {
													"type": "string"
												},
												"actual_in_dc_date": {
													"type": "string"
												},
												"arrival_port": {
													"type": "object",
													"properties": {
														"unlocode": {
															"type": "null"
														}
													}
												},
												"lading_port": {
													"type": "object",
													"properties": {
														"unlocode": {
															"type": "null"
														}
													}
												}
											}
										}
									},
									"addresses": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												},
												"target_party_id": {
													"type": "string"
												},
												"address_type": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonEmployeeSkills')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDemo"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EmployeeSkills.json",
						"folderPath": "Input",
						"container": "data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"skill": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"Address": {
							"type": "object",
							"properties": {
								"state": {
									"type": "string"
								},
								"country": {
									"type": "string"
								},
								"zipcode": {
									"type": "string"
								}
							}
						},
						"contact": {
							"type": "object",
							"properties": {
								"phone": {
									"type": "string"
								},
								"email": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonEmployeeSkills_1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "AzureDemo"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EmployeeSkills_1.json",
						"folderPath": "Input",
						"container": "data"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"skill": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"Address": {
							"type": "object",
							"properties": {
								"state": {
									"type": "string"
								},
								"country": {
									"type": "string"
								},
								"zipcode": {
									"type": "string"
								}
							}
						},
						"contact": {
							"type": "object",
							"properties": {
								"phone": {
									"type": "string"
								},
								"email": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Output1",
						"container": "data"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JsonOutputLesson40')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "JsonOutput",
						"container": "data"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lesson14emails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Lesson14emails.csv",
						"folderPath": "ADF_Real",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "email",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lesson21AzureSQLparameter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabasechainPlain",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabasechainPlain')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lesson21Employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Lesson21_Employee.csv",
						"folderPath": "ADF_Real/Lesson21",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lesson21Storage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "ADF_Real/Lesson21",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lesson21StorageParameter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Lesson21Filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF_Real"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Lesson21Filename",
							"type": "Expression"
						},
						"folderPath": "ADF_Real/Lesson21",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lesson2output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Lesson2output",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lesson3Output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Lesson3Output",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lesson3Outputfiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Lesson3Output",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lesson4Output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Lesson4Output",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LessonoutputParameter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"InputFilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().InputFilename",
							"type": "Expression"
						},
						"folderPath": "Lesson2output",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputCSVfiles_Hr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string",
						"defaultValue": "HRemployee.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": "output",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputCSVfiles_Payroll')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Payrollemployee.csv",
						"folderPath": "output",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputFilenamepara')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": "Lesson2output",
						"container": "data"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "data"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputLesson34')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "ADF_Real/Lesson34/output",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputParameter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": "output",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Outputdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "1234.txt",
						"folderPath": "output",
						"container": "data"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResourceWEBpage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestServiceWEB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"PageNumber": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('/api/v1/employee/',dataset().PageNumber)",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestServiceWEB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabasechainPlain",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "empid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empname",
						"type": "nvarchar"
					},
					{
						"name": "gender",
						"type": "nvarchar"
					},
					{
						"name": "dept",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SQLLesson21_Employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabasechainPlain')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Input",
						"container": "data"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WebAPI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "/api/users?page=1"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EmployeeCacheSink.csv",
						"folderPath": "Input",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsLesson44outputFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "data"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsParameterFoldername')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"OutFolder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().OutFolder",
							"type": "Expression"
						},
						"container": "data"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Input",
						"container": "data"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsTarget')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "data"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dslesson45output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"outputfilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().outputfilename",
							"type": "Expression"
						},
						"folderPath": "ADF_Real/output",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AKVtest')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault_storagetest",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AKVtest_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault_storagetest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault_storagetest')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_storagetest_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabasechainPlain')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabasechainPlain_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Linkedservice_dbastoreaccounttest')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [
					"DatastoreAccount"
				],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Linkedservice_dbastoreaccounttest_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestServiceWEB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestServiceWEB_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_Forappendtest20241103')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline_SetVariable_activity20241103",
							"type": "PipelineReference"
						},
						"parameters": {
							"FileName": "[parameters('trigger_Forappendtest20241103_properties_pipeline_SetVariable_activity20241103_parameters_FileName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/files/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('trigger_Forappendtest20241103_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated",
						"Microsoft.Storage.BlobDeleted"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline_SetVariable_activity20241103')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_TumblingWindow_test_every_1minute')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pipeline_scheduletrigger_test",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2024-10-31T11:18:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 3,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "SelfDependencyTumblingWindowTriggerReference",
							"offset": "-0.00:05:00"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline_scheduletrigger_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_eventtriggerdemo01')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline_copydata",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/data/blobs/Input/",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": false,
					"scope": "[parameters('trigger_eventtriggerdemo01_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated",
						"Microsoft.Storage.BlobDeleted"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline_copydata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_test_every_1_minute')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2024-10-31T11:07:00",
						"endTime": "2024-11-01T11:56:00",
						"timeZone": "GMT Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/StringLIbrary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "UDFLibrary",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [],
					"scriptLines": [
						"udfGenderToInteger(string) as integer = iif(i1==\"male\",1,iif(i1==\"female\", 0, -1))"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowCacheSink')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTBLemployee",
								"type": "DatasetReference"
							},
							"name": "sourceLocalEmployee"
						},
						{
							"dataset": {
								"referenceName": "dsEmployee",
								"type": "DatasetReference"
							},
							"name": "sourceEmployee"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTablecountry",
								"type": "DatasetReference"
							},
							"name": "sourceAzureSQLCountry"
						}
					],
					"sinks": [
						{
							"name": "sinkCache"
						},
						{
							"name": "sinkcountryCache"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTBLemployee",
								"type": "DatasetReference"
							},
							"name": "sinkAzureSQLLigentixEssentialService"
						}
					],
					"transformations": [
						{
							"name": "surrogateKeyEmpid"
						},
						{
							"name": "derivedColumnEmpid"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MaxEmpid as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select max(Empid) MaxEmpid from [dbo].[tbl_Employees]\\n',",
						"     format: 'query') ~> sourceLocalEmployee",
						"source(output(",
						"          name as string,",
						"          gender as string,",
						"          salary as short,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployee",
						"source(output(",
						"          contryid as string,",
						"          countryname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceAzureSQLCountry",
						"sourceEmployee keyGenerate(output(Empid as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyEmpid",
						"surrogateKeyEmpid derive(Empid = Empid+sinkCache#outputs()[1].MaxEmpid,",
						"          country = sinkcountryCache#lookup(country).countryname) ~> derivedColumnEmpid",
						"sourceLocalEmployee sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 0) ~> sinkCache",
						"sourceAzureSQLCountry sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     keys:['contryid'],",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 0) ~> sinkcountryCache",
						"derivedColumnEmpid sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Empid as integer,",
						"          EmpName as string,",
						"          Gender as string,",
						"          Salary as integer,",
						"          Department as string,",
						"          country as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Empid,",
						"          EmpName = name,",
						"          Gender = gender,",
						"          Salary = salary,",
						"          Department = department,",
						"          country",
						"     )) ~> sinkAzureSQLLigentixEssentialService"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTBLemployee')]",
				"[concat(variables('factoryId'), '/datasets/dsEmployee')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablecountry')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowDerivedcolumn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSemployeeCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkCSV"
						}
					],
					"transformations": [
						{
							"name": "derivedCountry"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          deptment as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployee",
						"sourceEmployee derive(country = upper(country),",
						"          Newcountry = iif(isNull(country), 'Unknown', upper(country))) ~> derivedCountry",
						"derivedCountry sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeDerived.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          name,",
						"          deptment,",
						"          country = Newcountry",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowDriftSchema')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSemployeeCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployeeCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          name as string,",
						"          Salary as integer,",
						"          deptment as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     preferredIntegralType: 'integer',",
						"     preferredFractionalType: 'decimal') ~> sourceEmployeeCSV",
						"sourceEmployeeCSV sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['out.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowFirsttry')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSemployeeCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployee"
						},
						{
							"dataset": {
								"referenceName": "DSdeptmentCSV",
								"type": "DatasetReference"
							},
							"name": "sourceDeptment"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkOutData"
						}
					],
					"transformations": [
						{
							"name": "joinEmployeeDeptment"
						},
						{
							"name": "ModifyColumns1",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          deptment as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployee",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceDeptment",
						"sourceEmployee, sourceDeptment join(deptment == depid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEmployeeDeptment",
						"joinEmployeeDeptment derive(country = upper(country)) ~> ModifyColumns1",
						"ModifyColumns1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeDeptment.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          name,",
						"          country,",
						"          deptment,",
						"          depname",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkOutData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/DSdeptmentCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowFlowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployduplicate"
						},
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceDeptduplicate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "flowlet1",
							"flowlet": {
								"referenceName": "flowlet1",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "flowlet2",
							"flowlet": {
								"referenceName": "flowlet1",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          gender as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'Input',",
						"     fileName: 'Employee_Duplicate20221226.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployduplicate",
						"source(output(",
						"          id as string,",
						"          name as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'Input',",
						"     fileName: 'Dept_Duplicate20221226.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceDeptduplicate",
						"sourceEmployduplicate compose(mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     ),",
						"     composition: 'flowlet1') ~> flowlet1@(output1)",
						"derivedColumn1 compose(mapColumn(",
						"          id,",
						"          name,",
						"          gender = gendor",
						"     ),",
						"     composition: 'flowlet1') ~> flowlet2@(output1)",
						"sourceDeptduplicate derive(gendor = 'OK') ~> derivedColumn1",
						"flowlet1@output1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['kkkkkk.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"flowlet2@output1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['dpet.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          name",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/flowlet1')]",
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowInlinedataset')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployeecsv"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          name as string,",
						"          Salary as short,",
						"          deptment as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'Input',",
						"     fileName: 'employee.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployeecsv",
						"sourceEmployeecsv sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'output',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLesson10')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Log Pipeline executions to log file",
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DummyLesson10",
								"type": "DatasetReference"
							},
							"name": "sourceDummy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADFRealLesson10",
								"type": "DatasetReference"
							},
							"name": "sinkLogfile"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnLogs"
						},
						{
							"name": "selectLogcolumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DataFactory as string,",
						"     PipeLine as string,",
						"     RunId as string,",
						"     TriggerName as string,",
						"     TriggerTime as string,",
						"     TriggerType as string,",
						"     Status as string,",
						"     CurrentTime as string,",
						"     DF_logfile as string",
						"}",
						"source(output(",
						"          Column_1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceDummy",
						"sourceDummy derive(DataFactory = $DataFactory,",
						"          PipeLine = $PipeLine,",
						"          RunId = $RunId,",
						"          TriggerName = $TriggerName,",
						"          TriggerTime = $TriggerTime,",
						"          TriggerType = $TriggerType,",
						"          Status = $Status,",
						"          CurrentTime = $CurrentTime) ~> derivedColumnLogs",
						"derivedColumnLogs select(mapColumn(",
						"          DataFactory,",
						"          PipeLine,",
						"          RunId,",
						"          TriggerName,",
						"          TriggerTime,",
						"          TriggerType,",
						"          Status,",
						"          CurrentTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectLogcolumns",
						"selectLogcolumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($DF_logfile)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkLogfile"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DummyLesson10')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADFRealLesson10')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLesson10_Append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Log Pipeline executions to log file",
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DummyLesson10",
								"type": "DatasetReference"
							},
							"name": "sourceDummy"
						},
						{
							"dataset": {
								"referenceName": "DS_ADFRealLesson10",
								"type": "DatasetReference"
							},
							"name": "sourceLogfile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADFRealLesson10",
								"type": "DatasetReference"
							},
							"name": "sinkLogfile"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnLogs"
						},
						{
							"name": "selectLogcolumns"
						},
						{
							"name": "unionwithOldlogfile"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DataFactory as string,",
						"     PipeLine as string,",
						"     RunId as string,",
						"     TriggerName as string,",
						"     TriggerTime as string,",
						"     TriggerType as string,",
						"     Status as string,",
						"     CurrentTime as string,",
						"     DF_logfile as string",
						"}",
						"source(output(",
						"          Column_1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceDummy",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:[('log/'+$DF_logfile)]) ~> sourceLogfile",
						"sourceDummy derive(DataFactory = $DataFactory,",
						"          PipeLine = $PipeLine,",
						"          RunId = $RunId,",
						"          TriggerName = $TriggerName,",
						"          TriggerTime = $TriggerTime,",
						"          TriggerType = $TriggerType,",
						"          Status = $Status,",
						"          CurrentTime = $CurrentTime) ~> derivedColumnLogs",
						"derivedColumnLogs select(mapColumn(",
						"          DataFactory,",
						"          PipeLine,",
						"          RunId,",
						"          TriggerName,",
						"          TriggerTime,",
						"          TriggerType,",
						"          Status,",
						"          CurrentTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectLogcolumns",
						"selectLogcolumns, sourceLogfile union(byName: true)~> unionwithOldlogfile",
						"unionwithOldlogfile sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[($DF_logfile)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkLogfile"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DummyLesson10')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADFRealLesson10')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLesson11SCD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabasechainPlain",
								"type": "LinkedServiceReference"
							},
							"name": "sinkAzureSQLDB"
						}
					],
					"transformations": [
						{
							"name": "alterRowEmployee"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          empname as string,",
						"          salary as short,",
						"          dept as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     fileName: 'EmployeeNEWLesson7.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceCSV",
						"sourceCSV alterRow(upsertIf(1==1)) ~> alterRowEmployee",
						"alterRowEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Empid as integer,",
						"          EmpName as string,",
						"          Salary as integer,",
						"          Department as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'employee',",
						"     insertable: false,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: true,",
						"     keys:['empid'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Empid = empid,",
						"          EmpName = empname,",
						"          Salary = salary,",
						"          Department = dept",
						"     )) ~> sinkAzureSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabasechainPlain')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLesson17SCDpart2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployee17"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabasechainPlain",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSQLTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabasechainPlain",
								"type": "LinkedServiceReference"
							},
							"name": "sinkSQLTableNewdata"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabasechainPlain",
								"type": "LinkedServiceReference"
							},
							"name": "sinkSQLTableUpdatedata"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnIsActive"
						},
						{
							"name": "selectRenamecolumns"
						},
						{
							"name": "lookupEmpid"
						},
						{
							"name": "filterExistRows"
						},
						{
							"name": "selectExistedSQLdata"
						},
						{
							"name": "derivedColumnIsActivenew"
						},
						{
							"name": "alterRow1isActive"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          empname as string,",
						"          gender as string,",
						"          country as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     fileName: 'EmployeeLesson17.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployee17",
						"source(output(",
						"          surrKey as integer,",
						"          empid as integer,",
						"          empname as string,",
						"          gender as string,",
						"          country as string,",
						"          isActive as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'EmployeeLesson17',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceSQLTable",
						"sourceEmployee17 derive(isActive = 1) ~> derivedColumnIsActive",
						"sourceSQLTable select(mapColumn(",
						"          SQL_surrKey = surrKey,",
						"          SQL_empid = empid,",
						"          SQL_empname = empname,",
						"          SQL_gender = gender,",
						"          SQL_country = country,",
						"          SQL_isActive = isActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRenamecolumns",
						"sourceEmployee17, selectRenamecolumns lookup(empid == SQL_empid,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookupEmpid",
						"lookupEmpid filter(!isNull(SQL_empid)) ~> filterExistRows",
						"filterExistRows select(mapColumn(",
						"          SQL_surrKey,",
						"          SQL_empid,",
						"          SQL_empname,",
						"          SQL_gender,",
						"          SQL_country,",
						"          SQL_isActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectExistedSQLdata",
						"selectExistedSQLdata derive(SQL_isActive = 0) ~> derivedColumnIsActivenew",
						"derivedColumnIsActivenew alterRow(updateIf(1==1)) ~> alterRow1isActive",
						"derivedColumnIsActive sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          surrKey as integer,",
						"          empid as integer,",
						"          empname as string,",
						"          gender as string,",
						"          country as string,",
						"          isActive as integer",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'EmployeeLesson17',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          empid,",
						"          empname,",
						"          gender,",
						"          country,",
						"          isActive",
						"     )) ~> sinkSQLTableNewdata",
						"alterRow1isActive sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          surrKey as integer,",
						"          empid as integer,",
						"          empname as string,",
						"          gender as string,",
						"          country as string,",
						"          isActive as integer",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'EmployeeLesson17',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['surrKey'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          empid = SQL_empid,",
						"          empname = SQL_empname,",
						"          gender = SQL_gender,",
						"          country = SQL_country,",
						"          isActive = SQL_isActive,",
						"          surrKey = SQL_surrKey",
						"     )) ~> sinkSQLTableUpdatedata"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabasechainPlain')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLesson22')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSkillLesson22"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkoutCSV"
						}
					],
					"transformations": [
						{
							"name": "aggregateSkill"
						},
						{
							"name": "derivedColumnSkill"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Empid as short,",
						"          Empname as string,",
						"          Skill as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     fileName: 'Lesson22Skill.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSkillLesson22",
						"sourceSkillLesson22 aggregate(groupBy(Empid,",
						"          Empname),",
						"     Skill = collect(Skill)) ~> aggregateSkill",
						"aggregateSkill derive(Skill = replace(replace(replace(toString(Skill),'[',''),']',''),'\"','')) ~> derivedColumnSkill",
						"derivedColumnSkill sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['kkkkkkk.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkoutCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLesson24Split1toNrows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceLesson241toNrows"
						}
					],
					"sinks": [
						{
							"name": "sinkOutput"
						}
					],
					"transformations": [
						{
							"name": "derivedColumncolumnskill"
						},
						{
							"name": "flattenSkilltoRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          empname as string,",
						"          skill as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     fileName: 'Lesson23Employeeskills.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceLesson241toNrows",
						"sourceLesson241toNrows derive(skill = split(skill, ',')) ~> derivedColumncolumnskill",
						"derivedColumncolumnskill foldDown(unroll(skill),",
						"     mapColumn(",
						"          empid,",
						"          empname,",
						"          skill",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenSkilltoRows",
						"flattenSkilltoRows sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sinkOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLesson33LoadCSVtoJSON')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCustCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "JsonOutput",
								"type": "DatasetReference"
							},
							"name": "sinkJson"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnPurchase"
						},
						{
							"name": "aggregatePurchases"
						}
					],
					"scriptLines": [
						"source(output(",
						"          custId as short,",
						"          custName as string,",
						"          itemName as string,",
						"          quantity as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real/Lesson33',",
						"     fileName: 'Lesson33cust.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceCustCSV",
						"sourceCustCSV derive(Purchases = @(itemName=itemName,",
						"          quantity=quantity)) ~> derivedColumnPurchase",
						"derivedColumnPurchase aggregate(groupBy(custId,",
						"          custName),",
						"     Purchases = collect(Purchases)) ~> aggregatePurchases",
						"aggregatePurchases sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Lesson33Cust.json'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkJson"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]",
				"[concat(variables('factoryId'), '/datasets/JsonOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLesson34PassExpression')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSparameterfilenameLesson34",
								"type": "DatasetReference"
							},
							"name": "sourceFileName"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutputLesson34",
								"type": "DatasetReference"
							},
							"name": "sinkoutputfile"
						}
					],
					"transformations": [
						{
							"name": "filterFileexpression"
						}
					],
					"scriptLines": [
						"parameters{",
						"     FileExpression as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceFileName",
						"sourceFileName filter(toBoolean(expr($FileExpression))) ~> filterFileexpression",
						"filterFileexpression sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Employeeoutput.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkoutputfile"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSparameterfilenameLesson34')]",
				"[concat(variables('factoryId'), '/datasets/OutputLesson34')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLesson34test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployee"
						}
					],
					"sinks": [
						{
							"name": "sinkFile"
						}
					],
					"transformations": [
						{
							"name": "filterbyGender"
						}
					],
					"scriptLines": [
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'Input',",
						"     fileName: 'EmployeeWindow.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployee",
						"sourceEmployee filter(byName('gender')=='male') ~> filterbyGender",
						"filterbyGender sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sinkFile"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLesson35')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableEmployeeSource",
								"type": "DatasetReference"
							},
							"name": "sourceSource"
						},
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabasechainPlain",
								"type": "LinkedServiceReference"
							},
							"name": "sourceTarget"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureSqlDatabasechainPlain",
								"type": "LinkedServiceReference"
							},
							"name": "sinkNotexisted"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnHarshsource"
						},
						{
							"name": "derivedColumnHarshTarget"
						},
						{
							"name": "existsemployee"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          gender as string,",
						"          dept as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceSource",
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          gender as string,",
						"          dept as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'SQLLesson21_Employee_Target',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceTarget",
						"sourceSource derive(HarshColumnSource = sha2(256, columns())) ~> derivedColumnHarshsource",
						"sourceTarget derive(HarshTarget = sha2(256, columns())) ~> derivedColumnHarshTarget",
						"derivedColumnHarshTarget, derivedColumnHarshsource exists(HarshColumnSource == HarshTarget,",
						"     negate:true,",
						"     broadcast: 'auto')~> existsemployee",
						"existsemployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'SQLLesson21_Employee_Target',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          empid,",
						"          empname,",
						"          gender,",
						"          dept",
						"     )) ~> sinkNotexisted"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableEmployeeSource')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabasechainPlain')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLesson43InputDynamicSQLpara')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableLesson43",
								"type": "DatasetReference"
							},
							"name": "sourceAzureSQLWatermark"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sinkCache"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     dfInputWatermark as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: ('SELECT * FROM dbo.Lesson43test where WaterMark>convert(DATETIME,' +$dfInputWatermark +')'),",
						"     format: 'query') ~> sourceAzureSQLWatermark",
						"sourceAzureSQLWatermark sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'Lesson43output',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1) ~> sinkCache"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableLesson43')]",
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLesson9Runningtotal')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployee"
						}
					],
					"sinks": [
						{
							"name": "sinkCache"
						}
					],
					"transformations": [
						{
							"name": "windowTotalID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          name as string,",
						"          gender as string,",
						"          department as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     fileName: 'Lesson8_AllEmployee.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployee",
						"sourceEmployee window(asc(id, true),",
						"     RunningTotlid = sum(id)) ~> windowTotalID",
						"windowTotalID sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sinkCache"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowParse')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTabletbl_employee20221226",
								"type": "DatasetReference"
							},
							"name": "sourceEmployeeAzure"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkOutput"
						}
					],
					"transformations": [
						{
							"name": "parseSkills"
						},
						{
							"name": "parseAddress"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empId as integer,",
						"          empName as string,",
						"          skills as string,",
						"          address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceEmployeeAzure",
						"sourceEmployeeAzure parse(ParseSkills = skills ? (skill1 as string,",
						"          skill2 as string,",
						"          skill3 as string),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: '|',",
						"     nullValue: '') ~> parseSkills",
						"parseSkills parse(ParseAddress = address ? (city as string,",
						"          country as string),",
						"     format: 'json',",
						"     documentForm: 'arrayOfDocuments') ~> parseAddress",
						"parseAddress sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeParse.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empId,",
						"          empName,",
						"          skill1 = ParseSkills.skill1,",
						"          skill2 = ParseSkills.skill2,",
						"          skill3 = ParseSkills.skill3,",
						"          address = ParseAddress.city,",
						"          country = ParseAddress.country",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTabletbl_employee20221226')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowUnion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OutputCSVfiles_Hr",
								"type": "DatasetReference"
							},
							"name": "sourceHRemployee"
						},
						{
							"dataset": {
								"referenceName": "OutputCSVfiles_Payroll",
								"type": "DatasetReference"
							},
							"name": "sourcePayrollout"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkFile"
						}
					],
					"transformations": [
						{
							"name": "unionEmployee"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceHRemployee",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcePayrollout",
						"sourceHRemployee, sourcePayrollout union(byName: true)~> unionEmployee",
						"unionEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Unionoutputemployee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkFile"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OutputCSVfiles_Hr')]",
				"[concat(variables('factoryId'), '/datasets/OutputCSVfiles_Payroll')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_Aggregate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSemployeeCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployee"
						},
						{
							"dataset": {
								"referenceName": "DSdeptmentCSV",
								"type": "DatasetReference"
							},
							"name": "sourceDept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinktoCSV"
						}
					],
					"transformations": [
						{
							"name": "aggregateDeptid"
						},
						{
							"name": "joinEmployeeDeptment"
						},
						{
							"name": "select1"
						},
						{
							"name": "ModifyColumnsUpperDeptname",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          deptment as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployee",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceDept",
						"sourceEmployee aggregate(groupBy(deptment),",
						"     TotalEmployee = count(empid)) ~> aggregateDeptid",
						"aggregateDeptid, sourceDept join(deptment == depid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEmployeeDeptment",
						"joinEmployeeDeptment select(mapColumn(",
						"          TotalEmployee,",
						"          Employdepname = depname",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(Employdepname = upper(Employdepname)) ~> ModifyColumnsUpperDeptname",
						"ModifyColumnsUpperDeptname sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeDeptAggre.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Employdepname,",
						"          TotalEmployee",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinktoCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/DSdeptmentCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_Lesson28UTCtoEST')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceLesson28UTC"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnESTcolumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          empname as string,",
						"          salary as short,",
						"          dep as string,",
						"          lastLoginUTC as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     fileName: 'Lesson28Employee.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceLesson28UTC",
						"sourceLesson28UTC derive(LoginEST = toTimestamp(lastLoginUTC, 'MM/dd/yyyy HH:mm:ss')-hours(4)) ~> derivedColumnESTcolumn",
						"derivedColumnESTcolumn sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowrEMOVEduplicate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployee"
						},
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployeeNEW"
						}
					],
					"sinks": [
						{
							"name": "sinkCache"
						}
					],
					"transformations": [
						{
							"name": "unionAllemployee"
						},
						{
							"name": "aggregateDistinctEmployee"
						},
						{
							"name": "sortEmpid"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          empname as string,",
						"          salary as short,",
						"          dept as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     fileName: 'EmployeeLesson7.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployee",
						"source(output(",
						"          empid as short,",
						"          empname as string,",
						"          salary as short,",
						"          dept as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     fileName: 'EmployeeNEWLesson7.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployeeNEW",
						"sourceEmployee, sourceEmployeeNEW union(byName: true)~> unionAllemployee",
						"unionAllemployee aggregate(groupBy(empid),",
						"     each(match(name!=\"empid\"), $$ = first($$))) ~> aggregateDistinctEmployee",
						"aggregateDistinctEmployee sort(asc(empid, true)) ~> sortEmpid",
						"sortEmpid sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sinkCache"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfAKVtest')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSdptmentAKVtest",
								"type": "DatasetReference"
							},
							"name": "sourceAKVstorage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceAKVstorage",
						"sourceAKVstorage sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['kkkk.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSdptmentAKVtest')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfAlterRow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeWindowCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployeeWindow"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTBLemployee",
								"type": "DatasetReference"
							},
							"name": "sinkAzurechainplaintest"
						}
					],
					"transformations": [
						{
							"name": "alterRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          gender as string,",
						"          country as string,",
						"          salary as integer,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployeeWindow",
						"sourceEmployeeWindow alterRow(deleteIf(department==\"Payroll\"),",
						"     updateIf(department==\"HR\")) ~> alterRow",
						"alterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Empid as integer,",
						"          EmpName as string,",
						"          Gender as string,",
						"          Salary as integer,",
						"          Department as string,",
						"          country as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Empid'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Empid = id,",
						"          EmpName = name,",
						"          Gender = gender,",
						"          Salary = salary,",
						"          Department = department",
						"     )) ~> sinkAzurechainplaintest"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmployeeWindowCSV')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTBLemployee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfAssert')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployee"
						},
						{
							"dataset": {
								"referenceName": "DSdeptmentCSV",
								"type": "DatasetReference"
							},
							"name": "sourcedept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "assertValidation"
						},
						{
							"name": "derivedColumnAdderrorcolumn"
						},
						{
							"name": "filterErrorcolumns"
						},
						{
							"name": "selectNeedcolumn"
						},
						{
							"name": "join2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          name as string,",
						"          gender as string,",
						"          doj as string,",
						"          depid as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'Input',",
						"     fileName: 'EmployeeAssert20221227.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployee",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcedept",
						"sourceEmployee, sourcedept assert(expectTrue(!isNull(toDate(doj, 'yyyyMMmdd')), false, 'assertOdj', null, 'Verify odj column if date'),",
						"     expectUnique(empid, false, 'assertEmpid', null, 'If it unique empid'),",
						"     expectExists(sourceEmployee@depid == sourcedept@depid, false, 'assertExistDept', null, 'If dept exists')) ~> assertValidation",
						"assertValidation derive(IsError = isError(),",
						"          DeptHasError = hasError('assertExistDept'),",
						"          dojHaserror = hasError('assertOdj'),",
						"          EmpUniqueError = hasError('assertEmpid')) ~> derivedColumnAdderrorcolumn",
						"derivedColumnAdderrorcolumn filter(IsError == false()) ~> filterErrorcolumns",
						"filterErrorcolumns select(mapColumn(",
						"          empid,",
						"          name,",
						"          gender,",
						"          doj,",
						"          depid = sourceEmployee@depid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectNeedcolumn",
						"sourcedept, selectNeedcolumn join(sourcedept@depid == selectNeedcolumn@depid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          depname,",
						"          empid,",
						"          name,",
						"          gender,",
						"          doj",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]",
				"[concat(variables('factoryId'), '/datasets/DSdeptmentCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfCast')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployee"
						}
					],
					"sinks": [
						{
							"name": "sinkGoodrows"
						},
						{
							"name": "sinkBadrows"
						}
					],
					"transformations": [
						{
							"name": "castColumn"
						},
						{
							"name": "splitGoodorBad"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          name as string,",
						"          gender as string,",
						"          doj as string,",
						"          salary as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'Input',",
						"     fileName: 'EmployeeCast20221228.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployee",
						"sourceEmployee cast(output(",
						"          id as integer,",
						"          doj as date 'dd/MM/yyyy',",
						"          salary as decimal(10,0)",
						"     ),",
						"     errors: true) ~> castColumn",
						"castColumn split(!isError(),",
						"     disjoint: false) ~> splitGoodorBad@(GoodRows, BadRows)",
						"splitGoodorBad@GoodRows sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sinkGoodrows",
						"splitGoodorBad@BadRows sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sinkBadrows"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfConditionalSplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSemployeeCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkAll"
						},
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkHRemployee"
						},
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkPayrollemployee"
						}
					],
					"transformations": [
						{
							"name": "splitWithDeptid"
						},
						{
							"name": "unionAll"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          deptment as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployee",
						"sourceEmployee split(equals(deptment, '1'),",
						"     equals(deptment, '2'),",
						"     equals(deptment, '3'),",
						"     disjoint: false) ~> splitWithDeptid@(ITemployee, HRemployee, Payrollemployee, Otheremployee)",
						"splitWithDeptid@ITemployee, splitWithDeptid@HRemployee, splitWithDeptid@Otheremployee, splitWithDeptid@Payrollemployee union(byName: true)~> unionAll",
						"unionAll sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ConditionalSplit.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkAll",
						"splitWithDeptid@HRemployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['HRemployee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkHRemployee",
						"splitWithDeptid@Payrollemployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Payrollemployee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkPayrollemployee"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfExistsTrans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSemployeeCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployee"
						},
						{
							"dataset": {
								"referenceName": "DSdeptmentCSV",
								"type": "DatasetReference"
							},
							"name": "sourceDept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkOutput"
						}
					],
					"transformations": [
						{
							"name": "existsDept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          deptment as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployee",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceDept",
						"sourceEmployee, sourceDept exists(deptment == depid,",
						"     negate:true,",
						"     broadcast: 'auto')~> existsDept",
						"existsDept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeExists.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/DSdeptmentCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfFlattenJson')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "JsonEmployeeSkills",
								"type": "DatasetReference"
							},
							"name": "dfFlattenJson"
						},
						{
							"dataset": {
								"referenceName": "JsonEmployeeSkills_1",
								"type": "DatasetReference"
							},
							"name": "SourceFlattenJason1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkcsv"
						},
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flattenSkills"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          skill as string[],",
						"          Address as (state as string, country as string, zipcode as string),",
						"          contact as (phone as string, email as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> dfFlattenJson",
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          skill as string[],",
						"          Address as (state as string, country as string, zipcode as string),",
						"          contact as (phone as string, email as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> SourceFlattenJason1",
						"dfFlattenJson foldDown(unroll(skill),",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          skill,",
						"          Address,",
						"          contact",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenSkills",
						"SourceFlattenJason1 select(mapColumn(",
						"          id,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"flattenSkills sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Flattenstills.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          skill",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkcsv",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['kkkk.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/JsonEmployeeSkills')]",
				"[concat(variables('factoryId'), '/datasets/JsonEmployeeSkills_1')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfFuzzy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSale1"
						},
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSale2"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "joinFuzzy"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Name as string,",
						"          Item as string,",
						"          Quantity as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'Input',",
						"     fileName: 'Sail1_Fuzzy.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSale1",
						"source(output(",
						"          Name as string,",
						"          Item as string,",
						"          Quantity as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'Input',",
						"     fileName: 'Sail2_Fuzzy.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSale2",
						"sourceSale1, sourceSale2 join(fuzzyCompare(sourceSale1@Name, sourceSale2@Name, 60.00),",
						"     joinType:'inner',",
						"     matchType:'fuzzy',",
						"     ignoreSpaces: false,",
						"     scoreColumn:'Samilarity%',",
						"     broadcast: 'off')~> joinFuzzy",
						"joinFuzzy sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfLesson1HandleErrorRows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSale51"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkToCSV"
						},
						{
							"name": "sinkBadCSV"
						},
						{
							"name": "sinkAzureSQLtable"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "assertErrorColumn"
						},
						{
							"name": "split2"
						},
						{
							"name": "derivedColumnAddFilenamecolumn"
						},
						{
							"name": "derivedColumnAddFilenamecolumn1"
						},
						{
							"name": "unionGoodandBad"
						},
						{
							"name": "derivedColumns"
						},
						{
							"name": "derivedColumns1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          saleDate as string,",
						"          salesItem as string,",
						"          country as string,",
						"          quantity as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     fileName: 'SalesIND_2020_May_01.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSale51",
						"sourceSale51 split(isNull(toDate(saleDate, 'dd-MMM-yyyy')),",
						"     disjoint: false) ~> split1@(BadRows, GoodRows)",
						"sourceSale51 assert(expectTrue(!isNull(toDate(saleDate, 'dd-MMM-yyyy')), false, 'assertSaleDate', null, 'Verify Date column')) ~> assertErrorColumn",
						"assertErrorColumn split(isError(),",
						"     disjoint: false) ~> split2@(BadRows1, GoodRows1)",
						"split2@BadRows1 derive(Filename = 'ADF_Real/SalesIND_2020_May_01.csv') ~> derivedColumnAddFilenamecolumn",
						"split2@GoodRows1 derive(Filename = 'ADF_Real/SalesIND_2020_May_01.csv') ~> derivedColumnAddFilenamecolumn1",
						"derivedColumnAddFilenamecolumn, derivedColumnAddFilenamecolumn1 union(byName: true)~> unionGoodandBad",
						"split1@BadRows derive(Filename = 'ADF_Real/SalesIND_2020_May_01.csv',",
						"          quantity = toInteger(quantity)) ~> derivedColumns",
						"split1@GoodRows derive(Filename = 'ADF_Real/SalesIND_2020_May_01.csv',",
						"          quantity = toInteger(quantity),",
						"          saleDate = toDate(saleDate,'dd-MMM-yyyy')) ~> derivedColumns1",
						"unionGoodandBad sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Sale51.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkToCSV",
						"derivedColumns sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sinkBadCSV",
						"derivedColumns1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sinkAzureSQLtable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfLesson8IncrementKeys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployee20221231"
						},
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceAllEmployee"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sinkAllemployee"
						}
					],
					"transformations": [
						{
							"name": "aggregateMaxEmployeeId"
						},
						{
							"name": "surrogateKeyId"
						},
						{
							"name": "joinNewEmployee"
						},
						{
							"name": "derivedColumnEmpid"
						},
						{
							"name": "selectNeedcolumns"
						},
						{
							"name": "unionAllwithNew"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          gender as string,",
						"          department as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     fileName: 'Lesson8_Employee20221231.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployee20221231",
						"source(output(",
						"          id as short,",
						"          name as string,",
						"          gender as string,",
						"          department as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     fileName: 'Lesson8_AllEmployee.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceAllEmployee",
						"sourceAllEmployee aggregate(MaxId = max(id)) ~> aggregateMaxEmployeeId",
						"sourceEmployee20221231 keyGenerate(output(NewId as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyId",
						"surrogateKeyId, aggregateMaxEmployeeId join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinNewEmployee",
						"joinNewEmployee derive(id = toInteger(NewId+MaxId)) ~> derivedColumnEmpid",
						"derivedColumnEmpid select(mapColumn(",
						"          name,",
						"          gender,",
						"          department,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectNeedcolumns",
						"sourceAllEmployee, selectNeedcolumns union(byName: true)~> unionAllwithNew",
						"unionAllwithNew sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'ADF_Real',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Lesson8_AllEmployee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkAllemployee"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfLookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSemployeeCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployeeCSV"
						},
						{
							"dataset": {
								"referenceName": "DSdeptmentCSV",
								"type": "DatasetReference"
							},
							"name": "sourceDept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkLookupEmployeeDept"
						}
					],
					"transformations": [
						{
							"name": "lookupEmployeeDept"
						},
						{
							"name": "sortDeptid"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          deptment as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployeeCSV",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceDept",
						"sourceEmployeeCSV, sourceDept lookup(deptment == depid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupEmployeeDept",
						"lookupEmployeeDept sort(desc(depid, true)) ~> sortDeptid",
						"sortDeptid sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['LookupEmployeeDept.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          Empname = name,",
						"          country,",
						"          deptment,",
						"          depname",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkLookupEmployeeDept"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/DSdeptmentCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfNewBranch')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSemployeeCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployeeCSV"
						},
						{
							"dataset": {
								"referenceName": "DSdeptmentCSV",
								"type": "DatasetReference"
							},
							"name": "sourceDept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkAggregateCSV"
						},
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinktestCSV"
						}
					],
					"transformations": [
						{
							"name": "aggregateDept"
						},
						{
							"name": "joinDeptEmployee"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          deptment as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployeeCSV",
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceDept",
						"sourceEmployeeCSV aggregate(groupBy(deptment),",
						"     TotalEmployee = count(empid)) ~> aggregateDept",
						"sourceEmployeeCSV, sourceDept join(deptment == depid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDeptEmployee",
						"joinDeptEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sinkAggregateCSV.cvs'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          name,",
						"          country,",
						"          deptment,",
						"          depname",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkAggregateCSV",
						"aggregateDept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['kkkkkk.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          deptment,",
						"          TotalEmployees = TotalEmployee",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinktestCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/DSdeptmentCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfParameter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSemployeeCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployeeCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkOutputCSV"
						}
					],
					"transformations": [
						{
							"name": "filterCountry"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DFparaCountry as string",
						"}",
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          deptment as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployeeCSV",
						"sourceEmployeeCSV filter(country==$DFparaCountry) ~> filterCountry",
						"filterCountry sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployOutputdfFilter.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkOutputCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfPivotTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSemployeeCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployeeCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkPivot"
						},
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkAggregate"
						}
					],
					"transformations": [
						{
							"name": "aggregateCountbyDpetCountry"
						},
						{
							"name": "pivotonCountry"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          deptment as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployeeCSV",
						"sourceEmployeeCSV aggregate(groupBy(deptment,",
						"          country),",
						"     TotalEmployee = count(empid),",
						"          MinIDemployee = min(empid),",
						"          MaxIDemployee = max(empid)) ~> aggregateCountbyDpetCountry",
						"sourceEmployeeCSV pivot(groupBy(deptment),",
						"     pivotBy(country),",
						"     CountryEmployeeTotal = count(empid),",
						"     columnNaming: 'Total_$N$V_Country',",
						"     lateral: true) ~> pivotonCountry",
						"pivotonCountry sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeePivot.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkPivot",
						"aggregateCountbyDpetCountry sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['alfjeaoifj.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkAggregate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfRank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSemployeeCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkCSV"
						}
					],
					"transformations": [
						{
							"name": "rankSalary"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "unionAllOutput"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          name as string,",
						"          Salary as integer,",
						"          deptment as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployee",
						"sourceEmployee rank(desc(Salary, true),",
						"     output(Ranking as long),",
						"     dense: true) ~> rankSalary",
						"sourceEmployee keyGenerate(output(ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1, rankSalary union(byName: true)~> unionAllOutput",
						"unionAllOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['KKKK.CSV'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfSelect')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSemployeeCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkOutput"
						}
					],
					"transformations": [
						{
							"name": "selectColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          deptment as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployee",
						"sourceEmployee select(mapColumn(",
						"          Empname = name,",
						"          empid,",
						"          country,",
						"          deptment",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectColumns",
						"selectColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['alfajfoieajfliesjaf.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfSort')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSemployeeCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkCSV"
						}
					],
					"transformations": [
						{
							"name": "sortDept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          deptment as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployee",
						"sourceEmployee sort(asc(deptment, true)) ~> sortDept",
						"sortDept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['SortEmployee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfStringify')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceDemojson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkOutput"
						}
					],
					"transformations": [
						{
							"name": "stringifyContact"
						},
						{
							"name": "derivedColumnContactString"
						}
					],
					"scriptLines": [
						"source(output(",
						"          contact as (landline as short, mobile as integer),",
						"          name as string,",
						"          skills as string[]",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     container: 'data',",
						"     folderPath: 'Input',",
						"     fileName: 'demo.json',",
						"     documentForm: 'documentPerLine') ~> sourceDemojson",
						"sourceDemojson stringify(ContractStringify = contact ? string,",
						"     format: 'json') ~> stringifyContact",
						"stringifyContact derive(ContractStringify = toString(ContractStringify)) ~> derivedColumnContactString",
						"derivedColumnContactString sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DemoStringify.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          name,",
						"          Contract = ContractStringify",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfSurrogate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSemployeeCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkCSV"
						}
					],
					"transformations": [
						{
							"name": "surrogateKeyID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          deptment as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployee",
						"sourceEmployee keyGenerate(output(ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyID",
						"surrogateKeyID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Surrogate.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSemployeeCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfUDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnGender"
						},
						{
							"name": "derivedColumnUDFGendertoInteger"
						},
						{
							"name": "union1"
						}
					],
					"udfLibraries": [
						{
							"referenceName": "StringLIbrary",
							"type": "DataFlowReference"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          gender as string,",
						"          salary as short,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'Input',",
						"     fileName: 'EmployeeCacheSink.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 derive(NewGender = iif(gender==\"male\", 1, iif(gender==\"female\",0,-1))) ~> derivedColumnGender",
						"source1 derive(NewGender = udfGenderToInteger(gender)) ~> derivedColumnUDFGendertoInteger",
						"derivedColumnUDFGendertoInteger, derivedColumnGender union(byName: true)~> union1",
						"union1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/StringLIbrary')]",
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfUnpivotTrans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DStestCSV",
								"type": "DatasetReference"
							},
							"name": "sourcetestCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkOutputCSV"
						}
					],
					"transformations": [
						{
							"name": "unpivotFruit"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PO as string,",
						"          Vendor as string,",
						"          Apple as string,",
						"          Mango as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcetestCSV",
						"sourcetestCSV unpivot(output(",
						"          Fruit as string,",
						"          Amount as string",
						"     ),",
						"     ungroupBy(PO,",
						"          Vendor),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotFruit",
						"unpivotFruit sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['UnpivotFruit.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkOutputCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DStestCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DStestCSV",
								"type": "DatasetReference"
							},
							"name": "sourcetestcsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkOurputValidationCSV"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          PO as string,",
						"          Vendor as string,",
						"          Apple as string,",
						"          Mango as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     ignoreNoFilesFound: false) ~> sourcetestcsv",
						"sourcetestcsv sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['testValidation.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkOurputValidationCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DStestCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfWindowsTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeWindowCSV",
								"type": "DatasetReference"
							},
							"name": "sourceEmployeeWindow"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkCSV"
						}
					],
					"transformations": [
						{
							"name": "windowSalary"
						},
						{
							"name": "windowDenseRank"
						},
						{
							"name": "unionAll"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          gender as string,",
						"          country as string,",
						"          salary as integer,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployeeWindow",
						"sourceEmployeeWindow window(over(department),",
						"     asc(salary, true),",
						"     AVGsalary = avg(salary)) ~> windowSalary",
						"sourceEmployeeWindow window(over(department),",
						"     desc(salary, true),",
						"     Rank = denseRank()) ~> windowDenseRank",
						"windowDenseRank, windowSalary union(byName: true)~> unionAll",
						"unionAll sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeWindowDenseRank.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmployeeWindowCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfWriteCacheSinktoPipeline')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dsEmployee",
								"type": "DatasetReference"
							},
							"name": "sourceEmployee"
						}
					],
					"sinks": [
						{
							"name": "sinkMaxSalaryCache"
						}
					],
					"transformations": [
						{
							"name": "aggregateMaxSalary"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          gender as string,",
						"          salary as short,",
						"          country as string,",
						"          department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployee",
						"sourceEmployee aggregate(MaxSary = max(salary)) ~> aggregateMaxSalary",
						"aggregateMaxSalary sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1) ~> sinkMaxSalaryCache"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dsEmployee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Filter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DSdeptmentCSV",
								"type": "DatasetReference"
							},
							"name": "sourceDept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkCSV"
						}
					],
					"transformations": [
						{
							"name": "filterEmployee"
						}
					],
					"scriptLines": [
						"source(output(",
						"          depid as string,",
						"          depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceDept",
						"sourceDept filter(equals(depid,'3')) ~> filterEmployee",
						"filterEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['KKKK.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DSdeptmentCSV')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_lesson5_fixedColumns')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADF_Real"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Linkedservice_dbastoreaccounttest",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployeeFixedColumns"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVoutputJoinemployeedept",
								"type": "DatasetReference"
							},
							"name": "sinkOutput"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnSplitColumns"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {_col0_} as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     folderPath: 'Input',",
						"     fileName: 'EmployeeFixed_20221230_lesson5.txt',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false) ~> sourceEmployeeFixedColumns",
						"sourceEmployeeFixedColumns derive(Empid = left({_col0_}, 4),",
						"          Empname = substring({_col0_}, 5, 10),",
						"          State = substring({_col0_}, 17, 2),",
						"          Contact = right({_col0_}, 8)) ~> derivedColumnSplitColumns",
						"derivedColumnSplitColumns select(mapColumn(",
						"          Empid,",
						"          Empname,",
						"          State,",
						"          Contact",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeFixed20221230.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]",
				"[concat(variables('factoryId'), '/datasets/CSVoutputJoinemployeedept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowlet1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "StudyDemo"
				},
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						},
						{
							"name": "input1"
						},
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"input(output(",
						"          id as string,",
						"          name as string,",
						"          gender as string",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> input1",
						"input1 aggregate(groupBy(id,",
						"          name,",
						"          gender),",
						"     count = count()) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 output() ~> output1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow20241105')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "20241106"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee",
								"type": "DatasetReference"
							},
							"name": "sourceEmployee"
						},
						{
							"dataset": {
								"referenceName": "dept",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DeptEmployee",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "joinEmployeeDept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          ename as string,",
						"          country as string,",
						"          deptid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmployee",
						"source(output(",
						"          departid as string,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dept",
						"sourceEmployee, dept join(deptid == departid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEmployeeDept",
						"joinEmployeeDept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeDept.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empname = ename,",
						"          country,",
						"          deptname",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee')]",
				"[concat(variables('factoryId'), '/datasets/dept')]",
				"[concat(variables('factoryId'), '/datasets/DeptEmployee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee.csv",
						"folderPath": "input",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "ename",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "deptid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Dept.csv",
						"folderPath": "input",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "departid",
						"type": "String"
					},
					{
						"name": "deptname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeptEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Linkedservice_dbastoreaccounttest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Linkedservice_dbastoreaccounttest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow20241105",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployee": {},
									"dept": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlow20241106"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow20241105')]"
			]
		}
	]
}